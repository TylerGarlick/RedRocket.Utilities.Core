<?xml version="1.0"?>
<doc>
  <assembly>
    <name>FlitBit.Copy</name>
  </assembly>
  <members>
    <member name="T:FlitBit.Copy.AnonymousSourceCopier`2">
      <summary>
              Copier implementation for anonymous source objects.
            </summary>
      <typeparam name="TSource" />
      <typeparam name="TTarget" />
    </member>
    <member name="T:FlitBit.Copy.ICopier`2">
      <summary>
              Copies properties of the source object to the target object.
            </summary>
      <typeparam name="TSource">source type S</typeparam>
      <typeparam name="TTarget">target type T</typeparam>
    </member>
    <member name="M:FlitBit.Copy.ICopier`2.CopyTo(`1,`0,FlitBit.Copy.CopyKind,FlitBit.Core.Factory.IFactory)">
      <summary>
              Copies properties from a source object to a target object.
            </summary>
      <param name="target">the target object</param>
      <param name="source">the source object</param>
      <param name="kind">kind of copy (loose or strict)</param>
      <param name="factory">a container scope</param>
    </member>
    <member name="M:FlitBit.Copy.AnonymousSourceCopier`2.CopyTo(`1,`0,FlitBit.Copy.CopyKind,FlitBit.Core.Factory.IFactory)">
      <summary>
              Copies source to target.
            </summary>
      <param name="target" />
      <param name="source" />
      <param name="kind" />
      <param name="factory" />
    </member>
    <member name="T:FlitBit.Copy.Copier`2">
      <summary>
              Copies properties of the source object to the target object.
            </summary>
      <typeparam name="TSource">source type S</typeparam>
      <typeparam name="TTarget">target type T</typeparam>
    </member>
    <member name="M:FlitBit.Copy.Copier`2.PerformLooseCopy(`1,`0,FlitBit.Core.Factory.IFactory)">
      <summary>
              Allows subclasses to perform a loose copy.
            </summary>
      <param name="target">the target object</param>
      <param name="source">the source object</param>
      <param name="factory">a container scope</param>
    </member>
    <member name="M:FlitBit.Copy.Copier`2.PerformStrictCopy(`1,`0,FlitBit.Core.Factory.IFactory)">
      <summary>
              Allows subclasses to perform a strict copy.
            </summary>
      <param name="target">the target object</param>
      <param name="source">the source object</param>
      <param name="factory">a container scope</param>
    </member>
    <member name="M:FlitBit.Copy.Copier`2.CopyTo(`1,`0,FlitBit.Copy.CopyKind,FlitBit.Core.Factory.IFactory)">
      <summary>
              Copies properties from a source object to a target object.
            </summary>
      <param name="target">the target object</param>
      <param name="source">the source object</param>
      <param name="kind">kind of copy (loose or strict)</param>
      <param name="factory">a container scope</param>
    </member>
    <member name="T:FlitBit.Copy.Copier`1">
      <summary>
              Static copier used with anonymous/closed types.
            </summary>
      <typeparam name="TTarget" />
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyConstruct``1(``0)">
      <summary>
              Copies source's properties to a new instance of target type TTarget.
            </summary>
      <param name="source">the source</param>
      <typeparam name="TSource">source type TSource</typeparam>
      <returns>an instance of TTarget, populated with data from the source.</returns>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyConstruct``1(``0,FlitBit.Core.Factory.IFactory)">
      <summary>
              Copies source's properties to a new instance of target type TTarget.
            </summary>
      <param name="source">the source</param>
      <param name="factory">a factory</param>
      <typeparam name="TSource">source type TSource</typeparam>
      <returns>an instance of TTarget, populated with data from the source.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyConstructAll``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Copies all source objects into new instances of target type TTarget.
            </summary>
      <param name="sources">the source</param>
      <typeparam name="TSource">source type TSource</typeparam>
      <returns>instances of TTarget, populated with data from the sources.</returns>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyConstructAll``1(System.Collections.Generic.IEnumerable{``0},FlitBit.Core.Factory.IFactory)">
      <summary>
              Copies all source objects into new instances of target type TTarget.
            </summary>
      <param name="sources">the source</param>
      <param name="factory">a factory</param>
      <typeparam name="TSource">source type TSource</typeparam>
      <returns>instances of TTarget, populated with data from the sources.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="new FlitBit.Copy.Copier&lt;TTarget&gt;.&lt;&gt;c__DisplayClass5&lt;TSource&gt;(){
    factory = factory, 
}.factory != null" vb="(() =&gt; {
    FlitBit.Copy.Copier&lt;TTarget&gt;.&lt;&gt;c__DisplayClass5&lt;TSource&gt; local_2_prime = New FlitBit.Copy.Copier(Of TTarget).&lt;&gt;c__DisplayClass5(Of TSource)();
    (local_2_prime.factory = factory)
    return local_2_prime; })().factory &lt;&gt; Nothing">new FlitBit.Copy.Copier&lt;TTarget&gt;.&lt;&gt;c__DisplayClass5&lt;TSource&gt;(){
    factory = factory, 
}.factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyEachSource``1(FlitBit.Core.Factory.IFactory,``0)">
      <summary>
              Copies each source's properties to a new instance of target type TTarget.
            </summary>
      <param name="factory">a factory</param>
      <param name="s1">the first source</param>
      <typeparam name="TS1">first source's type</typeparam>
      <returns>An instance of TTarget, populated with data from the sources.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyEachSource``2(FlitBit.Core.Factory.IFactory,``0,``1)">
      <summary>
              Copies each source's properties to a new instance of target type TTarget.
            </summary>
      <param name="factory">a factory</param>
      <param name="s1">the first source</param>
      <param name="s2">the second source</param>
      <typeparam name="TS1">first source's type</typeparam>
      <typeparam name="TS2">second source's type</typeparam>
      <returns>An instance of TTarget, populated with data from the sources.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyEachSource``3(FlitBit.Core.Factory.IFactory,``0,``1,``2)">
      <summary>
              Copies each source's properties to a new instance of target type TTarget.
            </summary>
      <param name="factory">a factory</param>
      <param name="s1">the first source</param>
      <param name="s2">the second source</param>
      <param name="s3">the third source</param>
      <typeparam name="TS1">first source's type</typeparam>
      <typeparam name="TS2">second source's type</typeparam>
      <typeparam name="TS3">thrid source's type</typeparam>
      <returns>An instance of TTarget, populated with data from the sources.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyEachSource``4(FlitBit.Core.Factory.IFactory,``0,``1,``2,``3)">
      <summary>
              Copies each source's properties to a new instance of target type TTarget.
            </summary>
      <param name="factory">a factory</param>
      <param name="s1">the first source</param>
      <param name="s2">the second source</param>
      <param name="s3">the third source</param>
      <param name="s4">the fourth source</param>
      <typeparam name="TS1">first source's type</typeparam>
      <typeparam name="TS2">second source's type</typeparam>
      <typeparam name="TS3">thrid source's type</typeparam>
      <typeparam name="TS4">fourth source's type</typeparam>
      <returns>An instance of TTarget, populated with data from the sources.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyEachSource``5(FlitBit.Core.Factory.IFactory,``0,``1,``2,``3,``4)">
      <summary>
              Copies each source's properties to a new instance of target type TTarget.
            </summary>
      <param name="factory">a factory</param>
      <param name="s1">the first source</param>
      <param name="s2">the second source</param>
      <param name="s3">the third source</param>
      <param name="s4">the fourth source</param>
      <param name="s5">the fifth source</param>
      <typeparam name="TS1">first source's type</typeparam>
      <typeparam name="TS2">second source's type</typeparam>
      <typeparam name="TS3">thrid source's type</typeparam>
      <typeparam name="TS4">fourth source's type</typeparam>
      <typeparam name="TS5">fifth source's type</typeparam>
      <returns>An instance of TTarget, populated with data from the sources.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyEachSource``6(FlitBit.Core.Factory.IFactory,``0,``1,``2,``3,``4,``5)">
      <summary>
              Copies each source's properties to a new instance of target type TTarget.
            </summary>
      <param name="factory">a factory</param>
      <param name="s1">the first source</param>
      <param name="s2">the second source</param>
      <param name="s3">the third source</param>
      <param name="s4">the fourth source</param>
      <param name="s5">the fifth source</param>
      <param name="s6">the sixth source</param>
      <typeparam name="TS1">first source's type</typeparam>
      <typeparam name="TS2">second source's type</typeparam>
      <typeparam name="TS3">thrid source's type</typeparam>
      <typeparam name="TS4">fourth source's type</typeparam>
      <typeparam name="TS5">fifth source's type</typeparam>
      <typeparam name="TS6">sixth source's type</typeparam>
      <returns>An instance of TTarget, populated with data from the sources.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyEachSource``7(FlitBit.Core.Factory.IFactory,``0,``1,``2,``3,``4,``5,``6)">
      <summary>
              Copies each source's properties to a new instance of target type TTarget.
            </summary>
      <param name="factory">a factory</param>
      <param name="s1">the first source</param>
      <param name="s2">the second source</param>
      <param name="s3">the third source</param>
      <param name="s4">the fourth source</param>
      <param name="s5">the fifth source</param>
      <param name="s6">the sixth source</param>
      <param name="s7">the seventh source</param>
      <typeparam name="TS1">first source's type</typeparam>
      <typeparam name="TS2">second source's type</typeparam>
      <typeparam name="TS3">thrid source's type</typeparam>
      <typeparam name="TS4">fourth source's type</typeparam>
      <typeparam name="TS5">fifth source's type</typeparam>
      <typeparam name="TS6">sixth source's type</typeparam>
      <typeparam name="TS7">seventh source's type</typeparam>
      <returns>An instance of TTarget, populated with data from the sources.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyEachSource``8(FlitBit.Core.Factory.IFactory,``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>
              Copies each source's properties to a new instance of target type TTarget.
            </summary>
      <param name="factory">a factory</param>
      <param name="s1">the first source</param>
      <param name="s2">the second source</param>
      <param name="s3">the third source</param>
      <param name="s4">the fourth source</param>
      <param name="s5">the fifth source</param>
      <param name="s6">the sixth source</param>
      <param name="s7">the seventh source</param>
      <param name="s8">the eigth source</param>
      <typeparam name="TS1">first source's type</typeparam>
      <typeparam name="TS2">second source's type</typeparam>
      <typeparam name="TS3">thrid source's type</typeparam>
      <typeparam name="TS4">fourth source's type</typeparam>
      <typeparam name="TS5">fifth source's type</typeparam>
      <typeparam name="TS6">sixth source's type</typeparam>
      <typeparam name="TS7">seventh source's type</typeparam>
      <typeparam name="TS8">eigth source's type</typeparam>
      <returns>An instance of TTarget, populated with data from the sources.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.CopyEachSource``9(FlitBit.Core.Factory.IFactory,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
              Copies each source's properties to a new instance of target type TTarget.
            </summary>
      <param name="factory">a factory</param>
      <param name="s1">the first source</param>
      <param name="s2">the second source</param>
      <param name="s3">the third source</param>
      <param name="s4">the fourth source</param>
      <param name="s5">the fifth source</param>
      <param name="s6">the sixth source</param>
      <param name="s7">the seventh source</param>
      <param name="s8">the eigth source</param>
      <param name="s9">the ninth source</param>
      <typeparam name="TS1">first source's type</typeparam>
      <typeparam name="TS2">second source's type</typeparam>
      <typeparam name="TS3">thrid source's type</typeparam>
      <typeparam name="TS4">fourth source's type</typeparam>
      <typeparam name="TS5">fifth source's type</typeparam>
      <typeparam name="TS6">sixth source's type</typeparam>
      <typeparam name="TS7">seventh source's type</typeparam>
      <typeparam name="TS8">eigth source's type</typeparam>
      <typeparam name="TS9">ninth source's type</typeparam>
      <returns>An instance of TTarget, populated with data from the sources.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.LooseCopyTo``1(`0,``0,FlitBit.Core.Factory.IFactory)">
      <summary>
              Performs a loose copy from source to target.
            </summary>
      <typeparam name="TSource" />
      <param name="target" />
      <param name="source" />
      <param name="factory" />
    </member>
    <member name="T:FlitBit.Copy.CopierAutoImplementAttribute">
      <summary>
              Used by the framework too wireup copier implementations.
            </summary>
    </member>
    <member name="M:FlitBit.Copy.CopierAutoImplementAttribute.#ctor">
      <summary>
              Creates a new instance.
            </summary>
    </member>
    <member name="M:FlitBit.Copy.CopierAutoImplementAttribute.GetImplementation``1(FlitBit.Core.Factory.IFactory,System.Action{System.Type,System.Func{``0}})">
      <summary>
              Generates an instance of ICopier&lt;,&gt;
            </summary>
      <typeparam name="T" />
      <param name="factory">the requesting factory</param>
      <param name="complete">callback upon completion</param>
      <returns />
    </member>
    <member name="M:FlitBit.Copy.CopierAutoImplementAttribute.GetImplementation(FlitBit.Core.Factory.IFactory,System.Type,System.Action{System.Type,System.Func{System.Object}})">
      <summary>
            Gets the implementation for type
            </summary>
      <param name="factory">the factory from which the type was requested.</param>
      <param name="type">the target types</param>
      <param name="complete">callback invoked when the implementation is available</param>
      <returns>
        <em>true</em> if implemented; otherwise <em>false</em>.
            </returns>
      <exception cref="T:System.ArgumentException">thrown if <paramref name="type" /> is not eligible for implementation</exception>
      <remarks>
            If the <paramref name="complete" /> callback is invoked, it must be given either an implementation type
                          assignable to type T, or a factory function that creates implementations of type T.
            </remarks>
    </member>
    <member name="T:FlitBit.Copy.CopierExtensions">
      <summary>
              Contains extensions over copiers.
            </summary>
    </member>
    <member name="M:FlitBit.Copy.CopierExtensions.CopyConstruct``2(FlitBit.Copy.ICopier{``0,``1},``0)">
      <summary>
              Copy constructs a target object from data contained in the source.
            </summary>
      <param name="copier" />
      <param name="source" />
      <typeparam name="TSource" />
      <typeparam name="TTarget" />
      <returns />
    </member>
    <member name="M:FlitBit.Copy.CopierExtensions.LooseCopy``2(FlitBit.Copy.ICopier{``0,``1},``1,``0)">
      <summary>
              Makes a loose copy of source to target.
            </summary>
      <param name="copier" />
      <param name="target" />
      <param name="source" />
      <typeparam name="TSource" />
      <typeparam name="TTarget" />
      <returns />
    </member>
    <member name="M:FlitBit.Copy.CopierExtensions.LooseCopy``2(FlitBit.Copy.ICopier{``0,``1},``1,``0,FlitBit.Core.Factory.IFactory)">
      <summary>
              Makes a strict copy of source to target.
            </summary>
      <param name="copier" />
      <param name="target" />
      <param name="source" />
      <param name="factory" />
      <typeparam name="TSource" />
      <typeparam name="TTarget" />
      <returns />
      <requires exception="T:System.ArgumentNullException" csharp="copier != null" vb="copier &lt;&gt; Nothing">copier != null</requires>
      <exception cref="T:System.ArgumentNullException">copier == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="M:FlitBit.Copy.CopierExtensions.StrictCopy``2(FlitBit.Copy.ICopier{``0,``1},``1,``0)">
      <summary>
              Makes a strict copy of source to target.
            </summary>
      <param name="copier" />
      <param name="target" />
      <param name="source" />
      <typeparam name="TSource" />
      <typeparam name="TTarget" />
      <returns />
    </member>
    <member name="M:FlitBit.Copy.CopierExtensions.StrictCopy``2(FlitBit.Copy.ICopier{``0,``1},``1,``0,FlitBit.Core.Factory.IFactory)">
      <summary>
              Makes a strict copy of source to target.
            </summary>
      <param name="copier" />
      <param name="target" />
      <param name="source" />
      <param name="factory" />
      <typeparam name="TSource" />
      <typeparam name="TTarget" />
      <returns />
      <requires exception="T:System.ArgumentNullException" csharp="copier != null" vb="copier &lt;&gt; Nothing">copier != null</requires>
      <exception cref="T:System.ArgumentNullException">copier == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
    <member name="T:FlitBit.Copy.Extensions">
      <summary>
              Copy extensions.
            </summary>
    </member>
    <member name="M:FlitBit.Copy.Extensions.CopyFrom``2(``0,``1)">
      <summary>
              Copies source's properties onto the target.
            </summary>
      <param name="source">the source</param>
      <param name="target">the target</param>
      <typeparam name="TSource">source type TSource</typeparam>
      <typeparam name="TTarget">target type TTarget</typeparam>
      <returns>the target object.</returns>
    </member>
    <member name="M:FlitBit.Copy.Extensions.CopyTo``2(``0,``1)">
      <summary>
              Copies source's properties onto the target.
            </summary>
      <param name="source">the source</param>
      <param name="target">the target</param>
      <typeparam name="TSource">source type TSource</typeparam>
      <typeparam name="TTarget">target type TTarget</typeparam>
      <returns>the source object.</returns>
    </member>
    <member name="T:FlitBit.Copy.CopyKind">
      <summary>
              Enum of copy kinds.
            </summary>
    </member>
    <member name="F:FlitBit.Copy.CopyKind.Loose">
      <summary>
              Default. Indicates a loose copy; all properties of source do not have to
              be present on target.
            </summary>
    </member>
    <member name="F:FlitBit.Copy.CopyKind.Strict">
      <summary>
              Indicates a strict copy; all properties of source must be present on target.
            </summary>
    </member>
    <member name="M:FlitBit.Copy.CopierTypeFactory.ConcreteType(System.Type,System.Type)">
      <requires exception="T:System.ArgumentNullException" csharp="sourceType != (System.Type)null" vb="sourceType &lt;&gt; ((System.Type)Nothing) ">sourceType != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">sourceType == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="targetType != (System.Type)null" vb="targetType &lt;&gt; ((System.Type)Nothing) ">targetType != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">targetType == null</exception>
      <ensures csharp="result != (System.Type)null" vb="result &lt;&gt; ((System.Type)Nothing) ">result != (System.Type)null</ensures>
    </member>
    <member name="M:FlitBit.Copy.CopierTypeFactory.ConcreteType``2">
      <ensures csharp="result != (System.Type)null" vb="result &lt;&gt; ((System.Type)Nothing) ">result != (System.Type)null</ensures>
    </member>
    <member name="M:FlitBit.Copy.CopierTypeFactory.BuildCopierType``2(FlitBit.Emit.EmittedModule,System.String)">
      <requires csharp="module != null" vb="module &lt;&gt; Nothing">module != null</requires>
      <requires csharp="typeName != null" vb="typeName &lt;&gt; Nothing">typeName != null</requires>
      <requires csharp="typeName.Length &gt; 0" vb="typeName.Length &gt; 0">typeName.Length &gt; 0</requires>
      <ensures csharp="result != (System.Type)null" vb="result &lt;&gt; ((System.Type)Nothing) ">result != (System.Type)null</ensures>
    </member>
    <member name="M:FlitBit.Copy.Copier`1.LooseCopyHelper`1.LooseCopyTo(`0,`0,FlitBit.Core.Factory.IFactory)">
      <requires exception="T:System.ArgumentNullException" csharp="factory != null" vb="factory &lt;&gt; Nothing">factory != null</requires>
      <exception cref="T:System.ArgumentNullException">factory == null</exception>
    </member>
  </members>
</doc>