<?xml version="1.0"?>
<doc>
  <assembly>
    <name>FlitBit.Emit</name>
  </assembly>
  <members>
    <member name="T:FlitBit.Emit.ValueRef`1">
      <summary>
              Reference to a raw value.
            </summary>
      <typeparam name="T" />
    </member>
    <member name="T:FlitBit.Emit.IValueRef">
      <summary>
              Interface for objects that have a value that can be loaded on the stack.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.IValueRef.LoadAddress(System.Reflection.Emit.ILGenerator)">
      <summary>
              Loads the address of the value by pushing it onto the stack.
            </summary>
      <param name="il">the il generator.</param>
    </member>
    <member name="M:FlitBit.Emit.IValueRef.LoadValue(System.Reflection.Emit.ILGenerator)">
      <summary>
              Loads the value by pushing it onto the stack.
            </summary>
      <param name="il">the il generator.</param>
    </member>
    <member name="M:FlitBit.Emit.IValueRef.StoreValue(System.Reflection.Emit.ILGenerator)">
      <summary>
              Stores the value by popping it off of the stack.
            </summary>
      <param name="il">the il generator.</param>
    </member>
    <member name="P:FlitBit.Emit.IValueRef.Name">
      <summary>
              Name of the value.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.IValueRef.TargetType">
      <summary>
              Gets the value's type.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.ValueRef`1.#ctor(`0)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="value" />
    </member>
    <member name="M:FlitBit.Emit.ValueRef`1.LoadAddress(System.Reflection.Emit.ILGenerator)">
      <summary>
              Loads the address of the value.
            </summary>
      <param name="il" />
    </member>
    <member name="M:FlitBit.Emit.ValueRef`1.LoadValue(System.Reflection.Emit.ILGenerator)">
      <summary>
              Loads the value.
            </summary>
      <param name="il" />
    </member>
    <member name="M:FlitBit.Emit.ValueRef`1.StoreValue(System.Reflection.Emit.ILGenerator)">
      <summary>
              Stores the value.
            </summary>
      <param name="il" />
    </member>
    <member name="P:FlitBit.Emit.ValueRef`1.Name">
      <summary>
              The value's name.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.ValueRef`1.TargetType">
      <summary>
              Get's the value's target type.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.EmittedAssembly">
      <summary>
              Helper class for emiting assemblies.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedAssembly.#ctor(System.String,System.String)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="name">the assembly's name</param>
      <param name="rootNamespace">the assembly's root namespace</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedAssembly.#ctor(System.String,System.String,System.Version,System.Globalization.CultureInfo)">
      <summary>
              Creates a new instance
            </summary>
      <param name="name">the assembly's name</param>
      <param name="rootNamespace">the assembly's root namespace</param>
      <param name="version">the assembly's version</param>
      <param name="culture">the assembly's culture</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedAssembly.#ctor(System.String,System.String,System.Version,System.Globalization.CultureInfo,System.Byte[],System.Byte[])">
      <summary>
              Creates a new instance
            </summary>
      <param name="name">the assembly's name</param>
      <param name="rootNamespace">the assembly's root namespace</param>
      <param name="version">the assembly's version</param>
      <param name="culture">the assembly's culture</param>
      <param name="publicKey">the assembly's public key</param>
      <param name="publicKeyToken">the assembly's public key token</param>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
      <requires exception="T:System.ArgumentNullException" csharp="version != (System.Version)null" vb="version &lt;&gt; ((System.Version)Nothing) ">version != (System.Version)null</requires>
      <exception cref="T:System.ArgumentNullException">version == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="culture != null" vb="culture &lt;&gt; Nothing">culture != null</requires>
      <exception cref="T:System.ArgumentNullException">culture == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedAssembly.#ctor(System.Reflection.AssemblyName,System.String)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="name">the assembly's name</param>
      <param name="rootNamespace">the assembly's root namespace</param>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedAssembly.Compile">
      <summary>
              Compiles the assembly.
            </summary>
      <returns />
      <requires description="already compiled" exception="T:System.InvalidOperationException" csharp="!this.IsCompiled" vb="Not Me.IsCompiled">!this.IsCompiled</requires>
      <exception cref="T:System.InvalidOperationException">IsCompiled</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedAssembly.DefineClass(System.String)">
      <summary>
              Defines a class.
            </summary>
      <param name="name">the class' name</param>
      <returns>the emitted class</returns>
    </member>
    <member name="M:FlitBit.Emit.EmittedAssembly.DefineClass(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>
              Defines a class.
            </summary>
      <param name="name">the class' name</param>
      <param name="attributes">the class' attributes</param>
      <param name="supertype">the class' supertype</param>
      <param name="interfaces">a list of interfaces the class will implement</param>
      <returns>the emitted class</returns>
    </member>
    <member name="M:FlitBit.Emit.EmittedAssembly.DefineModule(System.String,System.String)">
      <summary>
              Defines a new module in the assembly.
            </summary>
      <param name="name">the module's name</param>
      <param name="namespace">a root namespace for the module</param>
      <returns>An emitted module builder</returns>
    </member>
    <member name="P:FlitBit.Emit.EmittedAssembly.BaseModule">
      <summary>
              Gets the assembly's base module.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedAssembly.Builder">
      <summary>
              Gets the assembly's builder.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedAssembly.IsCompiled">
      <summary>
              Indicates whether the assembly has been compiled.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedAssembly.Name">
      <summary>
              Gets the assembly's name
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedAssembly.RootNamespace">
      <summary>
              Gets the assembly's root namespace.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.EmittedClass">
      <summary>
              Helper class for working with a class in the IL stream.
            </summary>
      <invariant>_module != null</invariant>
      <invariant>_fields != null</invariant>
      <invariant>_members != null</invariant>
      <invariant>this.Name != null</invariant>
      <invariant>this.Name.Length &gt; 0</invariant>
    </member>
    <member name="T:FlitBit.Emit.EmittedMember">
      <summary>
              Helper class for working with class members in the IL stream.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedMember.#ctor(FlitBit.Emit.EmittedClass,System.String)">
      <summary>
              Creates a new instance
            </summary>
      <param name="type">the emitted type</param>
      <param name="name">the name of the member</param>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedMember.Compile">
      <summary>
              Compiles the member.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedMember.OnCompile">
      <summary>
              Called by the framework when the member is being compiled.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedMember.IsCompiled">
      <summary>
              Indicates whether the member has been compiled.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedMember.IsStatic">
      <summary>
              Indicates whether the member is a static member.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedMember.Name">
      <summary>
              Gets the member's name.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedMember.TargetClass">
      <summary>
              Gets the emitted class on which this member resides.
            </summary>
    </member>
    <member name="F:FlitBit.Emit.EmittedClass.DefaultTypeAttributes">
      <summary>
              Default type attributes.
            </summary>
    </member>
    <member name="F:FlitBit.Emit.EmittedClass.StaticTypeAttributes">
      <summary>
              Static type attributes
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.#ctor(System.Reflection.Emit.ModuleBuilder,System.String)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="module">emitted module, owner</param>
      <param name="name">the class' name</param>
      <requires exception="T:System.ArgumentNullException" csharp="module != (System.Reflection.Module)null" vb="module &lt;&gt; ((System.Reflection.Module)Nothing) ">module != (System.Reflection.Module)null</requires>
      <exception cref="T:System.ArgumentNullException">module == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.#ctor(System.Reflection.Emit.ModuleBuilder,System.String,System.Reflection.TypeAttributes)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="module">emitted module, owner</param>
      <param name="name">the class' name</param>
      <param name="attributes">the class' attributes</param>
      <requires exception="T:System.ArgumentNullException" csharp="module != (System.Reflection.Module)null" vb="module &lt;&gt; ((System.Reflection.Module)Nothing) ">module != (System.Reflection.Module)null</requires>
      <exception cref="T:System.ArgumentNullException">module == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.#ctor(System.Reflection.Emit.ModuleBuilder,System.String,System.Reflection.TypeAttributes,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
              Creates a new instance.
            </summary>
      <param name="module">emitted module, owner</param>
      <param name="name">the class' name</param>
      <param name="attributes">the class' attributes</param>
      <param name="supertype">the class' supertype</param>
      <param name="interfaces">an array of interfaces the type will implement</param>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
      <requires exception="T:System.ArgumentNullException" csharp="module != (System.Reflection.Module)null" vb="module &lt;&gt; ((System.Reflection.Module)Nothing) ">module != (System.Reflection.Module)null</requires>
      <exception cref="T:System.ArgumentNullException">module == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.#ctor(System.Reflection.Emit.ModuleBuilder,FlitBit.Emit.EmittedClass,System.String,System.Reflection.TypeAttributes,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
              Creates a new instance.
            </summary>
      <param name="module">module</param>
      <param name="eclass">parent class, owner</param>
      <param name="name">the class' name</param>
      <param name="attributes">the class' attributes</param>
      <param name="supertype">the class' supertype</param>
      <param name="interfaces">an array of interfaces the type will implement</param>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
      <requires description="eclass cannot be null" exception="T:System.ArgumentNullException" csharp="eclass != null" vb="eclass &lt;&gt; Nothing">eclass != null</requires>
      <exception cref="T:System.ArgumentNullException">eclass == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.AddInterfaceImplementation(System.Type)">
      <summary>
              Adds an interface to the list of interfaces the class implements.
            </summary>
      <param name="type">interface type</param>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires description="type must be an interface" exception="T:System.ArgumentException" csharp="type.IsInterface" vb="type.IsInterface">type.IsInterface</requires>
      <exception cref="T:System.ArgumentException">!(type.IsInterface)</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineCCtor">
      <summary>
              Defines a default constructor.
            </summary>
      <returns>the emitted constructor</returns>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineCtor">
      <summary>
              Defines a constructor.
            </summary>
      <returns>the constructor</returns>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineDefaultCtor">
      <summary>
              Defines a default constructor.
            </summary>
      <returns>the constructor</returns>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineField``1(System.String)">
      <summary>
              Defines a field of type T
            </summary>
      <typeparam name="T">type T</typeparam>
      <param name="fieldName">the field's name</param>
      <returns>the emitted field</returns>
      <requires csharp="fieldName != null" vb="fieldName &lt;&gt; Nothing">fieldName != null</requires>
      <requires csharp="fieldName.Length &gt; 0" vb="fieldName.Length &gt; 0">fieldName.Length &gt; 0</requires>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineField(System.String,System.Type)">
      <summary>
              Defines a field.
            </summary>
      <param name="fieldName">the field's name</param>
      <param name="fieldType">the field's type</param>
      <returns>the emitted field</returns>
      <requires exception="T:System.ArgumentNullException" csharp="fieldName != null" vb="fieldName &lt;&gt; Nothing">fieldName != null</requires>
      <exception cref="T:System.ArgumentNullException">fieldName == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="fieldName.Length &gt; 0" vb="fieldName.Length &gt; 0">fieldName.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">fieldName.Length &lt;= 0</exception>
      <requires exception="T:System.ArgumentNullException" csharp="fieldType != (System.Type)null" vb="fieldType &lt;&gt; ((System.Type)Nothing) ">fieldType != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">fieldType == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineField(System.String,FlitBit.Emit.TypeRef)">
      <summary>
              Defines a field.
            </summary>
      <param name="fieldName">the field's name</param>
      <param name="fieldType">the field's type (ref)</param>
      <returns>the emitted field</returns>
      <requires exception="T:System.ArgumentNullException" csharp="fieldName != null" vb="fieldName &lt;&gt; Nothing">fieldName != null</requires>
      <exception cref="T:System.ArgumentNullException">fieldName == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="fieldName.Length &gt; 0" vb="fieldName.Length &gt; 0">fieldName.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">fieldName.Length &lt;= 0</exception>
      <requires exception="T:System.ArgumentNullException" csharp="fieldType != null" vb="fieldType &lt;&gt; Nothing">fieldType != null</requires>
      <exception cref="T:System.ArgumentNullException">fieldType == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineGenericParamentersFromType(System.Type)">
      <summary>
              Defines generic arguments as defined on another generic type.
            </summary>
      <param name="generic">the generic type</param>
      <requires exception="T:System.ArgumentNullException" csharp="generic != (System.Type)null" vb="generic &lt;&gt; ((System.Type)Nothing) ">generic != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">generic == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineMethod(System.String)">
      <summary>
              Defines a method.
            </summary>
      <param name="methodName">the method's name</param>
      <returns>the emitted method</returns>
      <requires exception="T:System.ArgumentNullException" csharp="methodName != null" vb="methodName &lt;&gt; Nothing">methodName != null</requires>
      <exception cref="T:System.ArgumentNullException">methodName == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineMethodFromInfo(System.Reflection.MethodInfo)">
      <summary>
              Defines a method based on another method.
            </summary>
      <param name="method">the other method</param>
      <returns>the emitted method</returns>
      <requires exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineNestedType">
      <summary>
              Defines a nested type.
            </summary>
      <returns>the nested emitted type</returns>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineOverrideMethod(System.Reflection.MethodInfo)">
      <summary>
              Defines a method that overrides another method.
            </summary>
      <param name="method">the method to override</param>
      <returns>an emitted method</returns>
      <requires exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineProperty``1(System.String)">
      <summary>
              Defines a property of type T
            </summary>
      <typeparam name="T">type T</typeparam>
      <param name="propertyName">the property's name</param>
      <returns>the emitted property</returns>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefineProperty(System.String,System.Type)">
      <summary>
              Defines a property
            </summary>
      <param name="propertyName">the property's name</param>
      <param name="propertyType">the property's type</param>
      <returns>the emitted property</returns>
      <requires exception="T:System.ArgumentNullException" csharp="propertyName != null" vb="propertyName &lt;&gt; Nothing">propertyName != null</requires>
      <exception cref="T:System.ArgumentNullException">propertyName == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="propertyName.Length &gt; 0" vb="propertyName.Length &gt; 0">propertyName.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">propertyName.Length &lt;= 0</exception>
      <requires exception="T:System.ArgumentNullException" csharp="propertyType != (System.Type)null" vb="propertyType &lt;&gt; ((System.Type)Nothing) ">propertyType != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">propertyType == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefinePropertyFromPropertyInfo(System.Reflection.PropertyInfo)">
      <summary>
              Defines a property based on another property.
            </summary>
      <param name="property">the other property</param>
      <returns>the emitted property</returns>
      <requires description="property cannot be null" exception="T:System.ArgumentNullException" csharp="property != (System.Reflection.PropertyInfo)null" vb="property &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">property != (System.Reflection.PropertyInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">property == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefinePropertyWithBackingField``1(System.String)">
      <summary>
              Defines a property with a backing field of type T
            </summary>
      <typeparam name="T">type T</typeparam>
      <param name="propertyName">the property's name</param>
      <returns>the emitted property</returns>
      <requires exception="T:System.ArgumentNullException" csharp="propertyName != null" vb="propertyName &lt;&gt; Nothing">propertyName != null</requires>
      <exception cref="T:System.ArgumentNullException">propertyName == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="propertyName.Length &gt; 0" vb="propertyName.Length &gt; 0">propertyName.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">propertyName.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.DefinePropertyWithBackingField(System.String,System.Type)">
      <summary>
              Defines a property with a backing field.
            </summary>
      <param name="propertyName">the property's name</param>
      <param name="propertyType">the property's type</param>
      <returns>an emitted property</returns>
      <requires exception="T:System.ArgumentNullException" csharp="propertyName != null" vb="propertyName &lt;&gt; Nothing">propertyName != null</requires>
      <exception cref="T:System.ArgumentNullException">propertyName == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="propertyName.Length &gt; 0" vb="propertyName.Length &gt; 0">propertyName.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">propertyName.Length &lt;= 0</exception>
      <requires exception="T:System.ArgumentNullException" csharp="propertyType != (System.Type)null" vb="propertyType &lt;&gt; ((System.Type)Nothing) ">propertyType != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">propertyType == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Object[])">
      <summary>
              Sets a custom attribute for the emitted class.
            </summary>
      <param name="constructor">the attribute's constructor</param>
      <param name="constructorArgs">arguments for the constructor</param>
      <requires exception="T:System.ArgumentNullException" csharp="constructor != (System.Reflection.ConstructorInfo)null" vb="constructor &lt;&gt; ((System.Reflection.ConstructorInfo)Nothing) ">constructor != (System.Reflection.ConstructorInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">constructor == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.SetCustomAttribute(System.Reflection.ConstructorInfo)">
      <summary>
              Sets a custom attribute for the emitted class; for constructors that don't take arguments.
            </summary>
      <param name="constructor">the attribute's constructor</param>
      <requires exception="T:System.ArgumentNullException" csharp="constructor != (System.Reflection.ConstructorInfo)null" vb="constructor &lt;&gt; ((System.Reflection.ConstructorInfo)Nothing) ">constructor != (System.Reflection.ConstructorInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">constructor == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.SetCustomAttribute``1">
      <summary>
              Sets a custom attribute for the emitted class; uses the attribute's default constructor.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.StubMethodsForInterface(System.Type,System.Boolean,System.Boolean)">
      <summary>
              Produces stubs for all methods of an interface.
            </summary>
      <param name="intf">the interface</param>
      <param name="skipGetters">whether to skip getters</param>
      <param name="skipSetters">whether to skip setters</param>
      <requires exception="T:System.ArgumentNullException" csharp="intf != (System.Type)null" vb="intf &lt;&gt; ((System.Type)Nothing) ">intf != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">intf == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.TryGetProperty(System.String,FlitBit.Emit.EmittedProperty@)">
      <summary>
              Tries to get a property by name.
            </summary>
      <param name="name">the property's name</param>
      <param name="prop">variable to hold the property upon success</param>
      <returns>true if successful; otherwise false</returns>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.OnCompile">
      <summary>
              Compiles the emitted type.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedClass.Attributes">
      <summary>
              Gets the class' attributes.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedClass.Builder">
      <summary>
              Gets the class' builder.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedClass.Fields">
      <summary>
              Gets the class' fields.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedClass.Ref">
      <summary>
              Get's a type ref to the emitted class.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.EmittedConstructor">
      <summary>
              Helper class for working with constructors in the IL stream.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.EmittedMethodBase">
      <summary>
              Base helper class for working with methods in the IL stream.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.#ctor(FlitBit.Emit.EmittedClass,System.String)">
      <summary>
              Creates a new instance
            </summary>
      <param name="type">the emitted type, owner</param>
      <param name="name">the method's name</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.EmitCall(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits instructions for calling the method.
            </summary>
      <param name="il">IL</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.ClearAttributes">
      <summary>
              Clears the method's attributes.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.ContributeInstructions(System.Action{FlitBit.Emit.EmittedMethodBase,System.Reflection.Emit.ILGenerator})">
      <summary>
              Contributes instructions for the method.
            </summary>
      <param name="gen">an action that provides instructions for the method</param>
      <remarks>
              The <paramref name="gen" /> actions provided to the method will be called in the
              order they are provided. It is the caller's responsibility that the generators
              are registered in the proper order and that dependencies are satisfield before
              each generator is called.
            </remarks>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.DefineLocal(System.String,System.Type)">
      <summary>
              Defines a local variable.
            </summary>
      <param name="name">the local's name</param>
      <param name="type">the local's type</param>
      <returns>the emitted local</returns>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.DefineLocal(System.String,FlitBit.Emit.TypeRef)">
      <summary>
              Defines a local variable.
            </summary>
      <param name="name">the local's name</param>
      <param name="type">the local's type (ref)</param>
      <returns>the emitted local</returns>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.DefineParameter(System.String,FlitBit.Emit.TypeRef)">
      <summary>
              Defines a parameter.
            </summary>
      <param name="name">the parameter's name</param>
      <param name="typeRef">the parameter's type (ref)</param>
      <returns>the emitted parameter</returns>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.DefineParameter(System.String,System.Type)">
      <summary>
              Defines a parameter.
            </summary>
      <param name="name">the parameter's name</param>
      <param name="type">the parameter's type</param>
      <returns>the emitted parameter</returns>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.ExcludeAttributes(System.Reflection.MethodAttributes)">
      <summary>
              Excludes the attributes given.
            </summary>
      <param name="attr">attributes to be excluded</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.IncludeAttributes(System.Reflection.MethodAttributes)">
      <summary>
              Includes the attributes given.
            </summary>
      <param name="attr">the attributes to be included</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.EmitInstructions(System.Reflection.Emit.ILGenerator)">
      <summary>
              Compiles the method's contributed instructions.
            </summary>
      <param name="il">IL</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.AddParameter(FlitBit.Emit.EmittedParameter)">
      <summary>
              Adds a parameter introduced by subclasses.
            </summary>
      <param name="parameter">the parameter</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.CompileLocals(System.Reflection.Emit.ILGenerator)">
      <summary>
              Compiles the method's locals.
            </summary>
      <param name="il">IL</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.CompileParameters(System.Reflection.Emit.MethodBuilder)">
      <summary>
              Compiles the method's parmeters.
            </summary>
      <param name="m">the method</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.CompileParameters(System.Reflection.Emit.ConstructorBuilder)">
      <summary>
              Compiles the construtor's parameters.
            </summary>
      <param name="c">the construtor builder</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethodBase.SetILGenerator(System.Reflection.Emit.ILGenerator)">
      <summary>
              Sets the IL generator used when emitting. If subclasses utilize the
              compilation helper methods, the ILGenerator must be set prior to
              calling these helpers.
            </summary>
      <param name="il">IL</param>
      <returns>the given IL</returns>
    </member>
    <member name="P:FlitBit.Emit.EmittedMethodBase.ParameterTypes">
      <summary>
              Gets the method's parameter types.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedMethodBase.Attributes">
      <summary>
              Gets the method's attributes.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedMethodBase.CallingConvention">
      <summary>
              Gets the method's calling convetions.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedMethodBase.Parameters">
      <summary>
              Gets the method's defined parameters.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedMethodBase.HasBuilder">
      <summary>
              Indicates whether the method has a builder.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedConstructor.#ctor(FlitBit.Emit.EmittedClass,System.String)">
      <summary>
              Creates a new instance
            </summary>
      <param name="type">the emitted type; owner</param>
      <param name="name">the constructor's name</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedConstructor.EmitCall(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits a call to the underlying constructor.
            </summary>
      <param name="il" />
    </member>
    <member name="M:FlitBit.Emit.EmittedConstructor.OnCompile">
      <summary>
              Compiles the constructor.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedConstructor.Builder">
      <summary>
              Gets the constructor's builder.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedConstructor.HasBuilder">
      <summary>
              Indicates whether the constructor has a builder.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.EmittedField">
      <summary>
              Helper class for working with fields in the IL stream.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.IFieldRef">
      <summary>
              Interface for field references.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.IFieldRef.FieldInfo">
      <summary>
              Gets the FieldInfo for the target field.
            </summary>
      <returns>FieldInfo metadata for the underlying field.</returns>
    </member>
    <member name="M:FlitBit.Emit.EmittedField.#ctor(FlitBit.Emit.EmittedClass,System.String,FlitBit.Emit.TypeRef)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="type">the emitted type</param>
      <param name="name">the field's name</param>
      <param name="fieldType">the field's type (ref)</param>
      <requires exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
      <requires description="fieldType cannot be null" exception="T:System.ArgumentNullException" csharp="fieldType != null" vb="fieldType &lt;&gt; Nothing">fieldType != null</requires>
      <exception cref="T:System.ArgumentNullException">fieldType == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedField.ClearAttributes">
      <summary>
              Clears the field's attributes.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedField.ExcludeAttributes(System.Reflection.FieldAttributes)">
      <summary>
              Excludes the attributes given.
            </summary>
      <param name="attr">the attributes to exclude</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedField.IncludeAttributes(System.Reflection.FieldAttributes)">
      <summary>
              Includes the attributes given.
            </summary>
      <param name="attr">the attributes to include</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedField.WithInit(FlitBit.Emit.IValueRef)">
      <summary>
              Assigns the field's initial value.
            </summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:FlitBit.Emit.EmittedField.OnCompile">
      <summary>
              Compiles the field.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedField.LoadAddress(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits instructions to load the field's address.
            </summary>
      <param name="il">IL</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedField.LoadValue(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits instructions to load the field's value.
            </summary>
      <param name="il" />
    </member>
    <member name="M:FlitBit.Emit.EmittedField.StoreValue(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits instructions to store the field's value.
            </summary>
      <param name="il">IL</param>
    </member>
    <member name="P:FlitBit.Emit.EmittedField.Attributes">
      <summary>
              Gets the field's attributes.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedField.Builder">
      <summary>
              Gets the field's builder.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedField.FieldType">
      <summary>
              Gets a reference to the field's type
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedField.FieldInfo">
      <summary>
              Gets the reflection FieldInfo for the field.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedField.TargetType">
      <summary>
              Gets the field's target type.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.EmittedGenericArgument">
      <summary>
              Helper class for working with generic arguments in the IL stream.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedGenericArgument.AddBaseTypeConstraint(System.Type)">
      <summary>
              Adds a type constraint to the generic argument.
            </summary>
      <param name="type">the constraining type</param>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">@type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedGenericArgument.AddBaseTypeConstraint(FlitBit.Emit.TypeRef)">
      <summary>
              Adds a type constraint to the generic argument.
            </summary>
      <param name="typeRef">a reference to the constraining type</param>
      <requires exception="T:System.ArgumentNullException" csharp="typeRef != null" vb="typeRef &lt;&gt; Nothing">typeRef != null</requires>
      <exception cref="T:System.ArgumentNullException">typeRef == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedGenericArgument.AddInterfaceConstraint(System.Type)">
      <summary>
              Adds an interface constraint to the generic argument.
            </summary>
      <param name="type">the constraining type</param>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">@type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedGenericArgument.AddInterfaceConstraint(FlitBit.Emit.TypeRef)">
      <summary>
              Adds an interface constraint to the generic argument.
            </summary>
      <param name="typeref">a reference to the constraining type</param>
      <requires exception="T:System.ArgumentNullException" csharp="typeref != null" vb="typeref &lt;&gt; Nothing">typeref != null</requires>
      <exception cref="T:System.ArgumentNullException">typeref == null</exception>
    </member>
    <member name="P:FlitBit.Emit.EmittedGenericArgument.Attributes">
      <summary>
              Gets the argument's attributes.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedGenericArgument.Name">
      <summary>
              Gets the argument's name
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedGenericArgument.Position">
      <summary>
              Gets the argument's position
            </summary>
    </member>
    <member name="T:FlitBit.Emit.EmittedLocal">
      <summary>
              Helper class for working with local variables in the IL stream.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedLocal.#ctor(System.String,System.Int32,FlitBit.Emit.TypeRef)">
      <summary>
              Creates a new instance
            </summary>
      <param name="name">the local's name</param>
      <param name="index">the index</param>
      <param name="localType">the type</param>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
      <requires description="localType cannot be null" exception="T:System.ArgumentNullException" csharp="localType != null" vb="localType &lt;&gt; Nothing">localType != null</requires>
      <exception cref="T:System.ArgumentNullException">localType == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedLocal.Compile(System.Reflection.Emit.ILGenerator)">
      <summary>
              Compiles the local.
            </summary>
      <param name="il" />
    </member>
    <member name="M:FlitBit.Emit.EmittedLocal.LoadAddress(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits instructions to load the local's address.
            </summary>
      <param name="il">IL</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedLocal.LoadValue(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits instructions to load the local's value.
            </summary>
      <param name="il">IL</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedLocal.StoreValue(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits instructions to store the local's value.
            </summary>
      <param name="il">IL</param>
    </member>
    <member name="P:FlitBit.Emit.EmittedLocal.Builder">
      <summary>
              Gets the local's builder.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedLocal.LocalIndex">
      <summary>
              Indicates the local's declaration index.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedLocal.LocalType">
      <summary>
              Indicates the local's type (ref).
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedLocal.Name">
      <summary>
              Gets the local's name.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedLocal.TargetType">
      <summary>
              Gets the local's target type.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.EmittedMethod">
      <summary>
              Helper class for working with methods in the IL stream.
            </summary>
    </member>
    <member name="F:FlitBit.Emit.EmittedMethod.PublicInterfaceImplementationAttributes">
      <summary>
              MethodAttributes for public interface implementations.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethod.#ctor(FlitBit.Emit.EmittedClass,System.String)">
      <summary>
              Creates a new instace.
            </summary>
      <param name="type">owning type</param>
      <param name="name">the method's name</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethod.#ctor(FlitBit.Emit.EmittedClass,System.Reflection.MethodInfo)">
      <summary>
              Creates a new instance based on the given method info.
            </summary>
      <param name="type">owning type</param>
      <param name="method">method info describing the method to emit</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethod.#ctor(FlitBit.Emit.EmittedClass,System.Reflection.MethodInfo,System.Boolean)">
      <summary>
              Creates a new instance that overrides the given method.
            </summary>
      <param name="type">owning type</param>
      <param name="method">method info describing the method to emit</param>
      <param name="isOverride">indicates whether the emitted method will override the given method</param>
      <requires exception="T:System.ArgumentNullException" csharp="type != null" vb="type &lt;&gt; Nothing">type != null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethod.EmitCall(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits a instructions to call the method.
            </summary>
      <param name="il" />
    </member>
    <member name="M:FlitBit.Emit.EmittedMethod.OnCompile">
      <summary>
              Compiles the method.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedMethod.GetGenericTypeParameters(System.Reflection.Emit.MethodBuilder,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
              Gets the method's
            </summary>
      <param name="builder" />
      <param name="genericArguments" />
      <returns />
    </member>
    <member name="P:FlitBit.Emit.EmittedMethod.ParameterTypes">
      <summary>
              Gets a method's parameter types.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedMethod.Builder">
      <summary>
              Gets the method's builder.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedMethod.GenericArgumentTypes">
      <summary>
              Gets the method's generic argument types.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedMethod.ReturnType">
      <summary>
              Gets a reference to the method's return type.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedMethod.HasBuilder">
      <summary>
              Indicates whether the method has a builder.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.EmittedModule">
      <summary>
              Helper class for working with a modules in the IL stream.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedModule.#ctor(FlitBit.Emit.EmittedAssembly,System.String,System.String)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="assembly">the assembly, owner</param>
      <param name="name">the module's name</param>
      <param name="namespace">a namespace name for the classes in the module (base)</param>
      <requires exception="T:System.ArgumentNullException" csharp="assembly != null" vb="assembly &lt;&gt; Nothing">assembly != null</requires>
      <exception cref="T:System.ArgumentNullException">assembly == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedModule.Compile">
      <summary>
              Compiles the module.
            </summary>
      <returns />
      <requires description="module already compiled" exception="T:System.ArgumentNullException" csharp="!this.IsCompiled" vb="Not Me.IsCompiled">!this.IsCompiled</requires>
      <exception cref="T:System.ArgumentNullException">IsCompiled</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedModule.DefineClass(System.String)">
      <summary>
              Defines a class.
            </summary>
      <param name="name">the class' name</param>
      <returns>the emitted class</returns>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
      <requires description="module already compiled" csharp="!this.IsCompiled" vb="Not Me.IsCompiled">!this.IsCompiled</requires>
    </member>
    <member name="M:FlitBit.Emit.EmittedModule.DefineClass(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>
              Defines a class
            </summary>
      <param name="name">the class' name</param>
      <param name="attributes">the class' attributes</param>
      <param name="supertype">the class' supertype</param>
      <param name="interfaces">list of interfaces the class will implement</param>
      <returns>the emitted class</returns>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedModule.Save">
      <summary>
              Saves the module.
            </summary>
      <requires csharp="this.Assembly != null" vb="Me.Assembly &lt;&gt; Nothing">this.Assembly != null</requires>
    </member>
    <member name="P:FlitBit.Emit.EmittedModule.Assembly">
      <summary>
              Gets the assembly within which the module resides.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedModule.Builder">
      <summary>
              Gets the underlying ModuleBuilder for the module.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedModule.IsCompiled">
      <summary>
              Indicates whether the module has been compiled.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedModule.Name">
      <summary>
              Gets the module's name.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedModule.Namespace">
      <summary>
              Gets the default namespace for the module.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.EmittedParameter">
      <summary>
              Helper class for working with parameters in the IL stream.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedParameter.#ctor(FlitBit.Emit.EmittedMethodBase,System.Int32,System.String,FlitBit.Emit.TypeRef)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="method">the method, owner</param>
      <param name="index">the parameter's index</param>
      <param name="name">the parameter's name</param>
      <param name="type">the parameter's type (ref)</param>
      <requires exception="T:System.ArgumentNullException" csharp="method != null" vb="method &lt;&gt; Nothing">method != null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedParameter.#ctor(System.Reflection.Emit.ParameterBuilder,System.Type)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="builder">a parameter builder</param>
      <param name="type">the parameter's type (ref)</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedParameter.ClearAttributes">
      <summary>
              Clears the parameter's attributes.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedParameter.ExcludeAttributes(System.Reflection.ParameterAttributes)">
      <summary>
              Excludes the attributes given.
            </summary>
      <param name="attr">attributes to be excluded</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedParameter.IncludeAttributes(System.Reflection.ParameterAttributes)">
      <summary>
              Includes the attributes given.
            </summary>
      <param name="attr">attributes to be encluded</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedParameter.Compile(System.Reflection.Emit.MethodBuilder)">
      <summary>
              Compiles the parameter.
            </summary>
      <param name="m">method builder</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedParameter.LoadAddress(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits IL to load the parameter's address.
            </summary>
      <param name="il" />
    </member>
    <member name="M:FlitBit.Emit.EmittedParameter.LoadValue(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits IL to load the parameter's value.
            </summary>
      <param name="il" />
    </member>
    <member name="M:FlitBit.Emit.EmittedParameter.StoreValue(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits IL to store the parameter's value.
            </summary>
      <param name="il" />
    </member>
    <member name="P:FlitBit.Emit.EmittedParameter.Attributes">
      <summary>
              Gets the method's attributes.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedParameter.Builder">
      <summary>
              Gets the parameter's builder.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedParameter.Index">
      <summary>
              Gets the parameter's index.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedParameter.Method">
      <summary>
              Gets the method that defines the parameter.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedParameter.ParameterType">
      <summary>
              Gets a reference to the parameter's type.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedParameter.Name">
      <summary>
              Gets the parameter's name.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedParameter.TargetType">
      <summary>
              Gets the parameter target's type.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.EmittedProperty">
      <summary>
              Helper class for working with properties in the IL stream.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.#ctor(FlitBit.Emit.EmittedClass,System.String,System.Type,System.Boolean)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="type">the property's type</param>
      <param name="name">the property's name</param>
      <param name="propertyType">the property's type</param>
      <param name="isStatic">whether the property is a static property</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.#ctor(FlitBit.Emit.EmittedClass,System.String,FlitBit.Emit.TypeRef,System.Boolean)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="type">the property's type</param>
      <param name="name">the property's name</param>
      <param name="propertyType">the property's type (ref)</param>
      <param name="isStatic">whether the property is a static property</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.#ctor(FlitBit.Emit.EmittedClass,System.String,FlitBit.Emit.TypeRef,System.Type[],System.Boolean)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="type">the property's type</param>
      <param name="name">the property's name</param>
      <param name="propertyType">the property's type (ref)</param>
      <param name="paramTypes">the property's parameter types</param>
      <param name="isStatic">whether the property is a static property</param>
      <requires exception="T:System.ArgumentNullException" csharp="propertyType != null" vb="propertyType &lt;&gt; Nothing">propertyType != null</requires>
      <exception cref="T:System.ArgumentNullException">propertyType == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="paramTypes != null" vb="paramTypes &lt;&gt; Nothing">paramTypes != null</requires>
      <exception cref="T:System.ArgumentNullException">paramTypes == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.AddGetter">
      <summary>
              Adds a getter to a property.
            </summary>
      <returns>the emitted getter method</returns>
      <requires description="Getter already assigned" exception="T:System.ArgumentNullException" csharp="this.Getter == null" vb="Me.Getter = Nothing">this.Getter == null</requires>
      <exception cref="T:System.ArgumentNullException">Getter != null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.AddGetter(System.Reflection.MethodInfo)">
      <summary>
              Adds a getter to a property by overriding the given method.
            </summary>
      <returns>the emitted getter method</returns>
      <requires description="Getter already assigned" exception="T:System.ArgumentNullException" csharp="this.Getter == null" vb="Me.Getter = Nothing">this.Getter == null</requires>
      <exception cref="T:System.ArgumentNullException">Getter != null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.AddSetter">
      <summary>
              Adds asetter to a property.
            </summary>
      <returns>the emitted setter method</returns>
      <requires description="Setter already assigned" exception="T:System.ArgumentNullException" csharp="this.Setter == null" vb="Me.Setter = Nothing">this.Setter == null</requires>
      <exception cref="T:System.ArgumentNullException">Setter != null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.AddSetter(System.Reflection.MethodInfo)">
      <summary>
              Adds a setter to a property by overriding the given method.
            </summary>
      <returns>the emitted setter method</returns>
      <requires description="Setter already assigned" exception="T:System.ArgumentNullException" csharp="this.Setter == null" vb="Me.Setter = Nothing">this.Setter == null</requires>
      <exception cref="T:System.ArgumentNullException">Setter != null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.BindField(System.Reflection.FieldInfo)">
      <summary>
              Binds the property to an underlying field (simple getter and setter).
            </summary>
      <param name="field">a field ref</param>
      <requires exception="T:System.ArgumentNullException" csharp="field != (System.Reflection.FieldInfo)null" vb="field &lt;&gt; ((System.Reflection.FieldInfo)Nothing) ">field != (System.Reflection.FieldInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">field == null</exception>
      <requires description="property scope must agree with backing field scope" exception="T:System.ArgumentNullException" csharp="field.IsStatic == this.IsStatic" vb="field.IsStatic = Me.IsStatic">field.IsStatic == this.IsStatic</requires>
      <exception cref="T:System.ArgumentNullException">field.IsStatic != IsStatic</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.BindField(FlitBit.Emit.EmittedField)">
      <summary>
              Binds the property to an underlying field (simple getter and setter).
            </summary>
      <param name="field">the field</param>
      <requires exception="T:System.ArgumentNullException" csharp="field != null" vb="field &lt;&gt; Nothing">field != null</requires>
      <exception cref="T:System.ArgumentNullException">field == null</exception>
      <requires description="property scope must agree with backing field scope" exception="T:System.ArgumentNullException" csharp="field.IsStatic == this.IsStatic" vb="field.IsStatic = Me.IsStatic">field.IsStatic == this.IsStatic</requires>
      <exception cref="T:System.ArgumentNullException">field.IsStatic != IsStatic</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.OnCompile">
      <summary>
              Compiles the property.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.GetPropertyInfo">
      <summary>
              Gets property info from the emitted property (not implemented).
            </summary>
      <returns>not implemented</returns>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.LoadAddress(System.Reflection.Emit.ILGenerator)">
      <summary>
              Loads the address of a property (not implemented).
            </summary>
      <param name="il">IL</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.LoadValue(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits instructions to load the property's value.
            </summary>
      <param name="il">IL</param>
    </member>
    <member name="M:FlitBit.Emit.EmittedProperty.StoreValue(System.Reflection.Emit.ILGenerator)">
      <summary>
              Emits instructions to store the property's value.
            </summary>
      <param name="il">IL</param>
    </member>
    <member name="P:FlitBit.Emit.EmittedProperty.Attributes">
      <summary>
              Gets the property's attributes.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedProperty.BoundField">
      <summary>
              Gets a reference to the field to which the property is bound. (for bound properties)
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedProperty.Builder">
      <summary>
              Gets the property's builder.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedProperty.CallingConventions">
      <summary>
              Gets the property's calling conventions.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedProperty.Getter">
      <summary>
              Gets the property's getter method.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedProperty.IsReadonly">
      <summary>
              Indicates whether the property is readonly.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedProperty.ParameterTypes">
      <summary>
              Gets the property's parameter types.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedProperty.PropertyType">
      <summary>
              Gets the property's type.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedProperty.Setter">
      <summary>
              Gets the property's setter method.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.EmittedProperty.TargetType">
      <summary>
              Gets the property's target type.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.Extensions">
      <summary>
              Extension methods for System.Type.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.Extensions.FindElementType(System.Type)">
      <summary>
              Given a type, finds the type's element type.
            </summary>
      <param name="type">the type</param>
      <returns>the type's element type</returns>
    </member>
    <member name="M:FlitBit.Emit.Extensions.FindEnumerableElementType(System.Type)">
      <summary>
              If the type is IEnumerable&lt;&gt;, gets the element type (typeof(T)).
            </summary>
      <param name="type">the type</param>
      <returns>
              type T of the IEnumerable&lt;T&gt; if the given type is enumerable; otherwise <em>null</em>.
            </returns>
    </member>
    <member name="M:FlitBit.Emit.Extensions.FormatEmittedTypeName(System.Type,System.String)">
      <summary>
              Generates a valid type name for a generated type.
            </summary>
      <param name="type">the type upon which the generated type is based</param>
      <param name="suffix">
              a suffix for differentiation when generating more than
              one class based on <paramref name="type" /></param>
      <returns>a type name for the emitted type</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type.Namespace != null" vb="type.Namespace &lt;&gt; Nothing">type.Namespace != null</requires>
      <exception cref="T:System.ArgumentNullException">type.Namespace == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetGenericMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Int32,System.Int32)">
      <summary>
              Using reflection, gets a generic method from the target type.
            </summary>
      <param name="type">the target type</param>
      <param name="name">the property name</param>
      <param name="binding">binding flags</param>
      <param name="parameterCount">number of parameters on the target method</param>
      <param name="genericArgumentCount">number of generic arguments on the target method</param>
      <returns>a method or null</returns>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetGenericMethod(System.Type,System.String,System.Int32,System.Int32)">
      <summary>
              Using reflection, gets a generic method from the target type.
            </summary>
      <param name="type">the target type</param>
      <param name="name">the property name</param>
      <param name="parameterCount">number of parameters on the target method</param>
      <param name="genericArgumentCount">number of generic arguments on the target method</param>
      <returns>a method or null</returns>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetReadWriteProperties(System.Type)">
      <summary>
              Using reflection, gets the type's properties that are both read and write.
            </summary>
      <param name="type">the type</param>
      <returns>the properties</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetReadableProperties(System.Type)">
      <summary>
              Using reflection, gets the type's properties that can be read.
            </summary>
      <param name="type">the type</param>
      <returns>the properties</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetReadableProperties(System.Type,System.Reflection.BindingFlags)">
      <summary>
              Using reflection, gets the type's properties that can be read.
            </summary>
      <param name="type">the type</param>
      <param name="binding">binding flags</param>
      <returns>the properties</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetReadablePropertiesFromHierarchy(System.Type,System.Reflection.BindingFlags)">
      <summary>
              Using reflection, gets readable properties for the type and all of its base classes, interfaces.
            </summary>
      <param name="type">the type</param>
      <param name="binding">binding flags</param>
      <returns>writable properties</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetReadablePropertiesFromHierarchyWithCustomAttribute``1(System.Type,System.Reflection.BindingFlags)">
      <summary>
              Using reflection, gets readable properties from a type's hierarchy that declare a custom attribute.
            </summary>
      <typeparam name="TAttr">custom attribute type TAttr</typeparam>
      <param name="type">the type</param>
      <param name="binding">binding flags</param>
      <returns>writable properties</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetReadableProperty(System.Type,System.String)">
      <summary>
              Using reflection, gets a readable property by name.
            </summary>
      <param name="propertyName">the property name</param>
      <param name="type">the type</param>
      <returns>a property or null</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="propertyName != null" vb="propertyName &lt;&gt; Nothing">propertyName != null</requires>
      <exception cref="T:System.ArgumentNullException">propertyName == null</exception>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetReadablePropertyWithAssignmentCompatablity(System.Type,System.String,System.Reflection.BindingFlags,System.Type)">
      <summary>
              Using reflection, gets a readable property by name and assignability.
            </summary>
      <param name="type">the type</param>
      <param name="propertyName">the property name</param>
      <param name="binding">binding flags</param>
      <param name="assignableFromType">a type used to test assignability</param>
      <returns>a property or null</returns>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetTypeHierarchyInDeclarationOrder(System.Type)">
      <summary>
              Gets the type hierarchy in declaration (inheritance) order.
            </summary>
      <param name="type">the type</param>
      <returns>type hierarchy in declaration (inheritance) order</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetWritableProperties(System.Type)">
      <summary>
              Using reflection, gets writable properties.
            </summary>
      <param name="type">the type</param>
      <returns>writable properties</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetWritableProperties(System.Type,System.Reflection.BindingFlags)">
      <summary>
              Using reflection, gets writable properties.
            </summary>
      <param name="type">the type</param>
      <param name="binding">binding flags</param>
      <returns>writable properties</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetWritablePropertiesFromHierarchy(System.Type,System.Reflection.BindingFlags)">
      <summary>
              Using reflection, gets writable properties for the type and all of its base classes, interfaces.
            </summary>
      <param name="type">the type</param>
      <param name="binding">binding flags</param>
      <returns>writable properties</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetWritablePropertyWithAssignmentCompatablity(System.Type,System.String,System.Reflection.BindingFlags,System.Type)">
      <summary>
              Using reflection, gets a writable property by name and assignability.
            </summary>
      <param name="type">the type</param>
      <param name="propertyName">the property name</param>
      <param name="binding">binding flags</param>
      <param name="assignableFromType">a type used to test assignability</param>
      <returns>a property or null</returns>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetWritablePropertyWithAssignmentCompatablityFromHierarchy(System.Type,System.String,System.Reflection.BindingFlags,System.Type)">
      <summary>
              Using reflection, gets a writable property by name and assignability.
            </summary>
      <param name="type">the type</param>
      <param name="propertyName">the property name</param>
      <param name="binding">binding flags</param>
      <param name="assignableFromType">a type used to test assignability</param>
      <returns>a property or null</returns>
    </member>
    <member name="M:FlitBit.Emit.Extensions.GetWriteableProperty(System.Type,System.String)">
      <summary>
              Using reflection, gets a writable property by name.
            </summary>
      <param name="type">the type</param>
      <param name="propertyName">the property name</param>
      <returns>a property or null</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="propertyName != null" vb="propertyName &lt;&gt; Nothing">propertyName != null</requires>
      <exception cref="T:System.ArgumentNullException">propertyName == null</exception>
    </member>
    <member name="M:FlitBit.Emit.Extensions.IsAnonymousType(System.Type)">
      <summary>
              Determines if the privided type is an anonymous type.
            </summary>
      <param name="type" />
      <returns />
      <remarks>
              Adapted from answers found here:
              http://stackoverflow.com/questions/1650681/determining-whether-a-type-is-an-anonymous-type
            </remarks>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.Extensions.IsNumber(System.Type)">
      <summary>
              Determines if a type is a number.
            </summary>
      <param name="type" />
      <returns />
    </member>
    <member name="M:FlitBit.Emit.Extensions.IsTypeofGenericTypeDefinition(System.Type,System.Type)">
      <summary>
              Determins if the target type is an implementation of the given generic definition.
            </summary>
      <param name="type">the target type</param>
      <param name="generic">the generic definition</param>
      <returns>true if the target is an implementation of the generic definition</returns>
    </member>
    <member name="M:FlitBit.Emit.Extensions.MangleTypeName(System.Type)">
      <summary>
              Mangles a type name so that it is usable as an emitted type's name.
            </summary>
      <param name="type">the type</param>
      <returns>the (possibly) mangled name</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:FlitBit.Emit.Extensions.MangleTypeNameWithoutNamespace(System.Type)">
      <summary>
              Mangles a type name so that it is usable as an emitted type's name.
            </summary>
      <param name="type">the type</param>
      <returns>the (possibly) mangled name</returns>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:FlitBit.Emit.Extensions.MatchGenericMethod(System.Type,System.String,System.Int32,System.Type,System.Type[])">
      <summary>
              Matches a public generic instance method on the target type.
            </summary>
      <param name="type">the target type</param>
      <param name="name">the property name</param>
      <param name="genericArgumentCount">number of generic arguments on the target method</param>
      <param name="returnType">the return type expected on the generic method</param>
      <param name="parameterTypes">the parameter types expected on the generic method</param>
      <returns>Either the first matching generic method or null.</returns>
    </member>
    <member name="M:FlitBit.Emit.Extensions.MatchGenericMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Int32,System.Type,System.Type[])">
      <summary>
              Matches a generic method on the target type.
            </summary>
      <param name="type">the target type</param>
      <param name="name">the property name</param>
      <param name="binding">binding flags</param>
      <param name="genericArgumentCount">number of generic arguments on the target method</param>
      <param name="returnType">the return type expected on the generic method</param>
      <param name="parameterTypes">the parameter types expected on the generic method</param>
      <returns>Either the first matching generic method or null.</returns>
    </member>
    <member name="T:FlitBit.Emit.ILGeneratorExtensions">
      <summary>
              Helper class for working with IL.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Add(System.Reflection.Emit.ILGenerator)">
      <summary>
              Adds two values on the stack and pushes the result onto the stack.
            </summary>
      <param name="il">il generator</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.AddUnsignedWithOverflowCheck(System.Reflection.Emit.ILGenerator)">
      <summary>
              Adds two unsigned integers on the stack, performs an overflow check and pushes the result onto the stack.
            </summary>
      <param name="il">il generator</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.AddWithOverflowCheck(System.Reflection.Emit.ILGenerator)">
      <summary>
              Adds two integers on the stack, performs an overflow check and pushes the result onto the stack.
            </summary>
      <param name="il">il generator</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ArgListPointer(System.Reflection.Emit.ILGenerator)">
      <summary>
              Pushes an unmanaged pointer to the argument list of the current method onto the stack.
            </summary>
      <param name="il">il generator</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BeginCatchBlock(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary />
      <param name="il" />
      <param name="exceptionType" />
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BeginExceptionBlock(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BeginFinallyBlock(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BeginScope(System.Reflection.Emit.ILGenerator)">
      <summary>
              Starts a new scope.
            </summary>
      <param name="il">il generator</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BitwiseAnd(System.Reflection.Emit.ILGenerator)">
      <summary>
              Computes the bitwise AND of two values on the stack and pushes the result onto the stack.
            </summary>
      <param name="il">il generator</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Box(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
              Converts a ValueType to an object reference.
            </summary>
      <param name="valueType">the value type</param>
      <param name="il">il generator</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="valueType != (System.Type)null" vb="valueType &lt;&gt; ((System.Type)Nothing) ">valueType != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">valueType == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Branch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label.
            </summary>
      <param name="label" />
      <param name="il">il generator</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfEqual(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if two values are equal.
            </summary>
      <param name="label">A target label.</param>
      <param name="il">il generator</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfEqual_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if two values are equal.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfFalse(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the value on the stack is false, null, or zero.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfFalse_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the value on the stack is false, null, or zero.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfGreaterThan(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is greater than the second value on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfGreaterThanOrEqual(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is greater than or equal to the second value on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfGreaterThanOrEqual_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is greater than or equal to the second value on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfGreaterThanOrEqual_Unsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is greater than or equal to the second value on the stack when
              comparing unsigned integer values or unordered float values.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfGreaterThanOrEqual_Unsigned_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is greater than or equal to the second value on the stack when
              comparing unsigned integer values or unordered float values.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfGreaterThan_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label the first value on the stack
              is greater than the second value on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfGreaterThan_Unsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label the first value on the stack
              is greater than the second value on the stack when
              comparing unsigned integer values or unordered float values.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfGreaterThan_Unsigned_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is greater than the second value on the stack when
              comparing unsigned integer values or unordered float values.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfLessThan(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label the first value on the stack
              is less than the second value on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfLessThanOrEqual(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is less than or equal to the second value on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfLessThanOrEqual_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is less than or equal to the second value on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfLessThanOrEqual_Unsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is less than or equal to the second value on the stack when
              comparing unsigned integer values or unordered float values.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfLessThanOrEqual_Unsigned_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is less than or equal to the second value on the stack when
              comparing unsigned integer values or unordered float values.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfLessThan_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is less than the second value on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfLessThan_Unsigned(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is less than the second value on the stack when
              comparing unsigned integer values or unordered float values.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfLessThan_Unsigned_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the first value on the stack
              is less than the second value on the stack when
              comparing unsigned integer values or unordered float values.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfNotEqual(System.Reflection.Emit.ILGenerator,FlitBit.Emit.TypeRef,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if two values are not equal.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="type">type of values being compared</param>
      <param name="label">target label</param>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfNotEqual(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if two values are not equal.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="type">type of values being compared</param>
      <param name="label">target label</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfNotEqual_Un(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if two values are not equal.
            </summary>
      <param name="label">A target label.</param>
      <param name="il">il generator</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfTrue(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the value on the stack is true, not null, or non zero.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.BranchIfTrue_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label if the value on the stack is true, not null, or non zero.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Branch_ShortForm(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
              Transfers control to a target label.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="label">A target label.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Break(System.Reflection.Emit.ILGenerator)">
      <summary>
              Signals the CLI to inform the debugger that a breakpoint has been tripped.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
      <summary>
              Calls the method indicated by the method descriptor.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="method">MethodInfo for the method to call.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="method cannot be null" exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator,FlitBit.Emit.EmittedMethodBase)">
      <summary>
              Emits instructions to call the method given.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="method">the method</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="method cannot be null" exception="T:System.ArgumentNullException" csharp="method != null" vb="method &lt;&gt; Nothing">method != null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Call``1(System.Reflection.Emit.ILGenerator,System.String,System.Type[])">
      <summary>
              Emits instructions to call a method by name on type T.
            </summary>
      <typeparam name="T">type T</typeparam>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="name">name of the method to call</param>
      <param name="types">parameters that differentiate the method to call</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Call``1(System.Reflection.Emit.ILGenerator,System.String,System.Reflection.BindingFlags,System.Type[])">
      <summary>
              Emits instructions to call a method by name on type T.
            </summary>
      <typeparam name="T">type T</typeparam>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="name">name of the method to call</param>
      <param name="binding">method binding flags used to lookup the method</param>
      <param name="types">parameters that differentiate the method to call</param>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Call(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
      <summary>
              Calls the constructor indicated by the constructor descriptor.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="ctor">ConstructorInfo for the constructor to call.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="ctor cannot be null" exception="T:System.ArgumentNullException" csharp="ctor != (System.Reflection.ConstructorInfo)null" vb="ctor &lt;&gt; ((System.Reflection.ConstructorInfo)Nothing) ">ctor != (System.Reflection.ConstructorInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">ctor == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CallIndirectManaged(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary>
              Calls the method indicated on the evaluation stack (as a pointer to an entry point).
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="method">MethodInfo for the method to call.</param>
      <param name="callingConventions">The managed calling conventions to be used.</param>
      <param name="returnType">The return type of the method if it returns a result; otherwise null.</param>
      <param name="parameterTypes">The types of parameters for the call.</param>
      <param name="optionalParameterTypes">The types of optional parameters for the call if the method accepts optional parameters; otherwise null.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="method cannot be null" exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CallIndirectUnanaged(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
      <summary>
              Calls the method indicated on the evaluation stack (as a pointer to an entry point).
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="method">MethodInfo for the method to call.</param>
      <param name="callingConventions">The unmanaged calling conventions to be used.</param>
      <param name="returnType">The return type of the method if it returns a result; otherwise null.</param>
      <param name="parameterTypes">The types of parameters for the call.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="method cannot be null" exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CallVarArgs(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Type[])">
      <summary>
              Calls the varargs method indicated by the method descriptor.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="method">MethodInfo for the method to call.</param>
      <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method; otherwise null.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="method cannot be null" exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CallVarArgsVirtual(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo,System.Type[])">
      <summary>
              Calls a late-bound method on an object, pushing the result object onto the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="method">MethodInfo for the method to call.</param>
      <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method; otherwise null.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="method cannot be null" exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CallVirtual(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
      <summary>
              Calls a late-bound method on an object, pushing the result object onto the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="method">MethodInfo for the method to call.</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="method cannot be null" exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CallVirtual``1(System.Reflection.Emit.ILGenerator,System.String,System.Type[])">
      <summary>
              Emits instructions to call a virtual method by name on type T.
            </summary>
      <typeparam name="T">type T</typeparam>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="name">the target method's name</param>
      <param name="parameterTypes">parameters that differentiate the method to call</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CallVirtual``1(System.Reflection.Emit.ILGenerator,System.String,System.Reflection.BindingFlags,System.Type[])">
            ///
            <summary>
              Emits instructions to call a virtual method by name on type T.
            </summary><typeparam name="T">type T</typeparam><param name="il">an ILGenerator where instructions are emitted</param><param name="name">the target method's name</param><param name="binding">binding flags used to lookup the method</param><param name="parameterTypes">parameters that differentiate the method to call</param></member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CastClass(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
              Casts to the target type.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="targetType">the target type</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="targetType cannot be null" exception="T:System.ArgumentNullException" csharp="targetType != (System.Type)null" vb="targetType &lt;&gt; ((System.Type)Nothing) ">targetType != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">targetType == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CastClass``1(System.Reflection.Emit.ILGenerator)">
      <summary>
              Casts to the target type.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <typeparam name="T">target type T</typeparam>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CheckFinite(System.Reflection.Emit.ILGenerator)">
      <summary>
              Throws a System.ArithmeticException if the value on the stack is not a finite number.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CompareEqual(System.Reflection.Emit.ILGenerator)">
      <summary>
              Compares two values on the stack and if they are equal, the integer value 1 is placed on the stack; otherwise the value 0 is placed on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CompareEquality(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
              Compares the values on the stack for equality.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="type">the values' type</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CompareEquality(System.Reflection.Emit.ILGenerator,System.Type,System.Boolean)">
      <summary>
              Compares the two values on top of the stack for inequality.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="type">the values' type</param>
      <param name="lookingForInequality">indicates whether inequality is desired; reverses the logic</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CompareEquality(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},System.Action{System.Reflection.Emit.ILGenerator},System.Type,System.Boolean)">
      <summary>
              Compares the two values placed on the stack via callback methods for equality.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="loadLeftOperand">action that pushes the left hand operand onto the stack</param>
      <param name="loadRightOperand">action that pushes the right hand operand onto the stack</param>
      <param name="type">the values' type</param>
      <param name="lookingForInequality">indicates whether inequality is desired; reverses the logic</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CompareGreaterThan(System.Reflection.Emit.ILGenerator)">
      <summary>
              Compares two values on the stack and if the first value is greater than the second, the integer value 1 is placed on the stack; otherwise the value 0 is placed on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CompareGreaterThan_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Compares two values on the stack and if the first value is greater than the second, the integer value 1 is placed on the stack; otherwise the value 0 is placed on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CompareLessThan(System.Reflection.Emit.ILGenerator)">
      <summary>
              Compares two values on the stack and if the first value is less than the second, the integer value 1 is placed on the stack; otherwise the value 0 is placed on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CompareLessThan_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Compares two values on the stack and if the first value is less than the second, the integer value 1 is placed on the stack; otherwise the value 0 is placed on the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Constrained(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
              Emits the constrained op code.
            </summary>
      <param name="il" />
      <param name="t" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="t != (System.Type)null" vb="t &lt;&gt; ((System.Type)Nothing) ">t != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">t == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToFloat32(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to a float32.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToFloat32WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the unsigned value on the top of the stack to a float32.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToFloat64(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to a float64.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToInt16(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to an int16 and pads it to an int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToInt16WithOverflow(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to an int16 and pads it to an int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToInt16WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the unsigned value on the top of the stack to an int16 and pads it to an int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToInt32(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to an int32.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToInt32WithOverflow(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to an int32.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToInt32WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the unsigned value on the top of the stack to an int32.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToInt64(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to an int64.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToInt64WithOverflow(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to an int64.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToInt64WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the unsigned value on the top of the stack to an int64.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToInt8(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to an int8 and pads it to an int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToInt8WithOverflow(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to an int8 and pads it to an int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToInt8WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the unsigned value on the top of the stack to an int8 and pads it to an int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToNaturalInt(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to a natural int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToNaturalIntWithOverflow(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to a natural int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToNaturalIntWithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the unsigned value on the top of the stack to a natural int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUInt16(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to an unsigned int16 and pads it to an int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUInt32(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to an unsigned int32.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUInt64(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to an unsigned int64.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUInt8(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to an unsigned int8 and pads it to an int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUnsignedInt16WithOverflow(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the signed value on the top of the stack to a unsigned int16 and pads it to an int32.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUnsignedInt16WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the unsigned value on the top of the stack to an unsigned int16 and pads it to int32.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUnsignedInt32WithOverflow(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the signed value on the top of the stack to a unsigned int32.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUnsignedInt32WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the unsigned value on the top of the stack to an unsigned int32.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUnsignedInt64WithOverflow(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the signed value on the top of the stack to a unsigned int64.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUnsignedInt64WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the unsigned value on the top of the stack to an unsigned int64.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUnsignedInt8WithOverflow(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the signed value on the top of the stack to a unsigned int8 and pads it to an int32.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUnsignedInt8WithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the unsigned value on the top of the stack to an unsigned int8 and pads it to int32.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUnsignedNaturalInt(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the value on the top of the stack to a unsigned natural int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUnsignedNaturalIntWithOverflow(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the signed value on the top of the stack to a natural unsigned int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.ConvertToUnsignedNaturalIntWithOverflow_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Converts the unsigned value on the top of the stack to an unsigned natural int.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CopyBlock(System.Reflection.Emit.ILGenerator)">
      <summary>
              Copies a specified number of bytes from a source address to a destination address.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.CopyObject(System.Reflection.Emit.ILGenerator)">
      <summary>
              Copies the value type located at an address to another address (type &amp;, *, or natural int).
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.DeclareLocal(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
              Declares a local variable.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="localType">the local's type</param>
      <returns>a local builder</returns>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.DeclareLocal``1(System.Reflection.Emit.ILGenerator)">
      <summary>
            Declares a local variable.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <typeparam name="T">the variable's type T</typeparam>
      <returns>a local builder</returns>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.DeclareLocal(System.Reflection.Emit.ILGenerator,System.Type,System.Boolean)">
      <summary>
              Declares a local variable.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="localType">the local's type</param>
      <param name="pinned">indicates whether the local should be pinned</param>
      <returns>a local builder</returns>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.DefineAndMarkLabel(System.Reflection.Emit.ILGenerator)">
      <summary>
              Defines and marks a label.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <returns>returns the label</returns>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.DefineLabel(System.Reflection.Emit.ILGenerator)">
      <summary>
              Defines a label.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <returns>returns the label</returns>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Divide(System.Reflection.Emit.ILGenerator)">
      <summary>
              Divides two values and pushes the result as a floating-point or quotient onto the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Divide_Unsigned(System.Reflection.Emit.ILGenerator)">
      <summary>
              Divides two unsigned integer values and pushes the result (int32) onto the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Duplicate(System.Reflection.Emit.ILGenerator)">
      <summary>
              Copies the topmost value on the evaluation stack and pushes the copy onto the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.EndExceptionBlock(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.EndFilter(System.Reflection.Emit.ILGenerator)">
      <summary>
              Transfers control back from the filter clause of an exception block back to the CLI exception handler.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.EndFinally(System.Reflection.Emit.ILGenerator)">
      <summary>
              Transfers control back from the fault or finally clause of an exception block back to the CLI exception handler.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.EndScope(System.Reflection.Emit.ILGenerator)">
      <summary>
              Ends a scope.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.InitObject(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
              Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="type">the type</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">@type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.IsInstance(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
              Emits an instruction to test whether an object reference
              (type O) is an instance of a particular class.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="type">the type</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadArg(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary>
              Emits instructions to load an argument (referenced by a specified index value) onto the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="index">the arg's index</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadArg(System.Reflection.Emit.ILGenerator,FlitBit.Emit.EmittedParameter)">
      <summary />
      <param name="il" />
      <param name="parameter" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="Parameter cannot be null" exception="T:System.ArgumentNullException" csharp="parameter != null" vb="parameter &lt;&gt; Nothing">parameter != null</requires>
      <exception cref="T:System.ArgumentNullException">parameter == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadArgAddress(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary />
      <param name="il" />
      <param name="a" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadArgAddress(System.Reflection.Emit.ILGenerator,FlitBit.Emit.EmittedParameter)">
      <summary />
      <param name="il" />
      <param name="parameter" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="Parameter cannot be null" exception="T:System.ArgumentNullException" csharp="parameter != null" vb="parameter &lt;&gt; Nothing">parameter != null</requires>
      <exception cref="T:System.ArgumentNullException">parameter == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadArgAddress_ShortForm(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary />
      <param name="il" />
      <param name="a" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadArgAddress_ShortForm(System.Reflection.Emit.ILGenerator,FlitBit.Emit.EmittedParameter)">
      <summary />
      <param name="il" />
      <param name="parameter" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="Parameter cannot be null" exception="T:System.ArgumentNullException" csharp="parameter != null" vb="parameter &lt;&gt; Nothing">parameter != null</requires>
      <exception cref="T:System.ArgumentNullException">parameter == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadArg_0(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadArg_1(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadArg_2(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadArg_3(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadArg_ShortForm(System.Reflection.Emit.ILGenerator,System.Int16)">
      <summary />
      <param name="il" />
      <param name="a" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadDefaultValue(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
              Loads the default value for a type; similar to C#'s default keyword.
            </summary>
      <param name="il" />
      <param name="type" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadElementRef(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadField(System.Reflection.Emit.ILGenerator,FlitBit.Emit.IFieldRef)">
      <summary />
      <param name="il" />
      <param name="field" />
      <requires exception="T:System.ArgumentNullException" csharp="field != null" vb="field &lt;&gt; Nothing">field != null</requires>
      <exception cref="T:System.ArgumentNullException">field == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadField(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
      <summary />
      <param name="il" />
      <param name="field" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="field != (System.Reflection.FieldInfo)null" vb="field &lt;&gt; ((System.Reflection.FieldInfo)Nothing) ">field != (System.Reflection.FieldInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">field == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadFieldAddress(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
      <summary />
      <param name="il" />
      <param name="field" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="field != (System.Reflection.FieldInfo)null" vb="field &lt;&gt; ((System.Reflection.FieldInfo)Nothing) ">field != (System.Reflection.FieldInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">field == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadFieldAddress(System.Reflection.Emit.ILGenerator,FlitBit.Emit.EmittedField)">
      <summary />
      <param name="il" />
      <param name="field" />
      <requires exception="T:System.ArgumentNullException" csharp="field != null" vb="field &lt;&gt; Nothing">field != null</requires>
      <exception cref="T:System.ArgumentNullException">field == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadLocal(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
      <summary />
      <param name="il" />
      <param name="local" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="@local cannot be null" exception="T:System.ArgumentNullException" csharp="local != null" vb="local &lt;&gt; Nothing">local != null</requires>
      <exception cref="T:System.ArgumentNullException">@local == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadLocal(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary />
      <param name="il" />
      <param name="lcl" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadLocalAddress(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
      <summary />
      <param name="il" />
      <param name="local" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="@local cannot be null" exception="T:System.ArgumentNullException" csharp="local != null" vb="local &lt;&gt; Nothing">local != null</requires>
      <exception cref="T:System.ArgumentNullException">local == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadLocalAddress(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary />
      <param name="il" />
      <param name="lcl" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadLocalAddressShort(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
      <summary />
      <param name="il" />
      <param name="local" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="@local cannot be null" exception="T:System.ArgumentNullException" csharp="local != null" vb="local &lt;&gt; Nothing">local != null</requires>
      <exception cref="T:System.ArgumentNullException">local == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadLocalAddressShort(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary />
      <param name="il" />
      <param name="lcl" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadLocal_0(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadLocal_1(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadLocal_2(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadLocal_3(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadNull(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadObjectRef(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadProperty(System.Reflection.Emit.ILGenerator,System.Reflection.PropertyInfo,System.Boolean)">
      <summary />
      <param name="il" />
      <param name="p" />
      <param name="nonPublic" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="p cannot be null" exception="T:System.ArgumentNullException" csharp="p != (System.Reflection.PropertyInfo)null" vb="p &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">p != (System.Reflection.PropertyInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">p == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadToken(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary />
      <param name="il" />
      <param name="type" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">@type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadType(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary />
      <param name="il" />
      <param name="type" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">@type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Boolean)">
      <summary />
      <param name="il" />
      <param name="value" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary />
      <param name="il" />
      <param name="value" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Int64)">
      <summary />
      <param name="il" />
      <param name="value" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Single)">
      <summary />
      <param name="il" />
      <param name="value" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Double)">
      <summary />
      <param name="il" />
      <param name="value" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Decimal)">
      <summary />
      <param name="il" />
      <param name="value" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,FlitBit.Emit.IValueRef)">
      <summary />
      <param name="il" />
      <param name="value" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.String)">
      <summary />
      <param name="il" />
      <param name="value" />
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
      <summary />
      <param name="il" />
      <param name="value" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="value != (System.Reflection.FieldInfo)null" vb="value &lt;&gt; ((System.Reflection.FieldInfo)Nothing) ">value != (System.Reflection.FieldInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadValue(System.Reflection.Emit.ILGenerator,System.Object)">
      <summary />
      <param name="il" />
      <param name="value" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.LoadValueType(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
              Copies a value type object pointed to by an address to the top of the stack.
            </summary>
      <param name="il">an ILGenerator where instructions are emitted</param>
      <param name="type">the type being copied</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null &amp;&amp; type.IsValueType" vb="type &lt;&gt; ((System.Type)Nothing)  AndAlso type.IsValueType">type != (System.Type)null &amp;&amp; type.IsValueType</requires>
      <exception cref="T:System.ArgumentNullException">type == null &amp;&amp; type.IsValueType</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Load_I4(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary />
      <param name="il" />
      <param name="a" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Load_I4_0(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Load_I4_1(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Load_I4_2(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Load_I4_3(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Load_I4_4(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Load_I4_5(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Load_I4_6(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Load_I4_7(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Load_I4_8(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Load_I4_M1(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Load_I4_ShortForm(System.Reflection.Emit.ILGenerator,System.Int16)">
      <summary />
      <param name="il" />
      <param name="a" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.MarkLabel(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary />
      <param name="il" />
      <param name="lbl" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Multiply(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.New``1(System.Reflection.Emit.ILGenerator,System.Reflection.BindingFlags,System.Type[])">
      <summary />
      <typeparam name="T" />
      <param name="il" />
      <param name="bindingAttr" />
      <param name="types" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.New``1(System.Reflection.Emit.ILGenerator,System.Type[])">
      <summary />
      <typeparam name="T" />
      <param name="il" />
      <param name="types" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.NewArr(System.Reflection.Emit.ILGenerator,System.Type,System.Int32)">
      <summary />
      <param name="il" />
      <param name="type" />
      <param name="elmCount" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">@type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.NewObj(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
      <summary />
      <param name="il" />
      <param name="ctor" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="ctor cannot be null" exception="T:System.ArgumentNullException" csharp="ctor != (System.Reflection.ConstructorInfo)null" vb="ctor &lt;&gt; ((System.Reflection.ConstructorInfo)Nothing) ">ctor != (System.Reflection.ConstructorInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">ctor == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Nop(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Pop(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreArg(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary>
              Emits IL to store a parameter's value.
            </summary>
      <param name="il" />
      <param name="index">the parameter's index</param>
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreElement(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder,System.Int32,System.Int32)">
      <summary />
      <param name="il" />
      <param name="local" />
      <param name="index" />
      <param name="value" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="local cannot be null" exception="T:System.ArgumentNullException" csharp="local != null" vb="local &lt;&gt; Nothing">local != null</requires>
      <exception cref="T:System.ArgumentNullException">local == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreElement(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreElementRef(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreField(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
      <summary />
      <param name="il" />
      <param name="field" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="field != (System.Reflection.FieldInfo)null" vb="field &lt;&gt; ((System.Reflection.FieldInfo)Nothing) ">field != (System.Reflection.FieldInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">field == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreField(System.Reflection.Emit.ILGenerator,FlitBit.Emit.IFieldRef)">
      <summary />
      <param name="il" />
      <param name="field" />
      <requires exception="T:System.ArgumentNullException" csharp="field != null" vb="field &lt;&gt; Nothing">field != null</requires>
      <exception cref="T:System.ArgumentNullException">field == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreLocal(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
      <summary />
      <param name="il" />
      <param name="local" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="local cannot be null" exception="T:System.ArgumentNullException" csharp="local != null" vb="local &lt;&gt; Nothing">local != null</requires>
      <exception cref="T:System.ArgumentNullException">local == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreLocal(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary />
      <param name="il" />
      <param name="localIndex" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreLocalShortForm(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary />
      <param name="il" />
      <param name="lcl" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreLocal_0(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreLocal_1(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreLocal_2(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreLocal_3(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreProperty(System.Reflection.Emit.ILGenerator,System.Reflection.PropertyInfo,System.Boolean)">
      <summary />
      <param name="il" />
      <param name="p" />
      <param name="nonPublic" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires description="p cannot be null" exception="T:System.ArgumentNullException" csharp="p != (System.Reflection.PropertyInfo)null" vb="p &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">p != (System.Reflection.PropertyInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">p == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.StoreValue(System.Reflection.Emit.ILGenerator,FlitBit.Emit.IValueRef)">
      <summary />
      <param name="il" />
      <param name="value" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Subtract(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Switch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label[])">
      <summary />
      <param name="il" />
      <param name="cases" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Throw(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Throw(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary />
      <param name="il" />
      <param name="exception" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="exception != (System.Type)null" vb="exception &lt;&gt; ((System.Type)Nothing) ">exception != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">exception == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="typeof(System.Exception).IsAssignableFrom(exception)" vb="typeof(System.Exception).IsAssignableFrom(exception)">typeof(System.Exception).IsAssignableFrom(exception)</requires>
      <exception cref="T:System.ArgumentNullException">!(typeof(Exception).IsAssignableFrom(exception))</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.UnboxAny(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary />
      <param name="il" />
      <param name="type" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">@type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ILGeneratorExtensions.Xor(System.Reflection.Emit.ILGenerator)">
      <summary />
      <param name="il" />
      <requires exception="T:System.ArgumentNullException" csharp="il != null" vb="il &lt;&gt; Nothing">il != null</requires>
      <exception cref="T:System.ArgumentNullException">il == null</exception>
    </member>
    <member name="T:FlitBit.Emit.MemberInfoExtensions">
      <summary>
              Contains extension methods for the MemberInfo.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.MemberInfoExtensions.GetTypeOfValue(System.Reflection.MemberInfo)">
      <summary>
              Gets the type of a member's value.
            </summary>
      <param name="member">the member</param>
      <returns>the type</returns>
      <requires exception="T:System.ArgumentNullException" csharp="member != (System.Reflection.MemberInfo)null" vb="member &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">member != (System.Reflection.MemberInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">member == null</exception>
    </member>
    <member name="T:FlitBit.Emit.MethodInfoExtensions">
      <summary>
              Contains extension methods for the MethodInfo and MethodBase types.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.MethodInfoExtensions.GetParameterTypes(System.Reflection.MethodBase)">
      <summary>
              Gets the parameter types for a method.
            </summary>
      <param name="method" />
      <returns />
      <requires exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodBase)null" vb="method &lt;&gt; ((System.Reflection.MethodBase)Nothing) ">method != (System.Reflection.MethodBase)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="T:FlitBit.Emit.ParameterHelper">
      <summary>
              Helper class for working with parameters in the IL stream. These helpers make it easier
              to deal with method parameters and parameter info, including generics.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.ParameterHelper.GetParameterTypes(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
      <summary>
              Extracts a parameter list from a method.
            </summary>
      <param name="method">the method</param>
      <param name="parameters">additional parameter info</param>
      <returns>a parameter list</returns>
      <requires exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="parameters != null" vb="parameters &lt;&gt; Nothing">parameters != null</requires>
      <exception cref="T:System.ArgumentNullException">parameters == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ParameterHelper.ParameterCount(System.Reflection.MethodInfo)">
      <summary>
              Gets the parameter count.
            </summary>
      <param name="method">The method info.</param>
      <requires exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ParameterHelper.SetUpParameterConstraints(System.Type[],System.Reflection.Emit.GenericTypeParameterBuilder[])">
      <summary>
              Set up parameter constraints.
            </summary>
      <param name="parameterTypes" />
      <param name="genericTypeParameterBuilders" />
      <requires exception="T:System.ArgumentNullException" csharp="parameterTypes != null" vb="parameterTypes &lt;&gt; Nothing">parameterTypes != null</requires>
      <exception cref="T:System.ArgumentNullException">parameterTypes == null</exception>
    </member>
    <member name="M:FlitBit.Emit.ParameterHelper.SetUpParameters(System.Type[],System.Reflection.ParameterInfo[],System.Reflection.Emit.MethodBuilder)">
      <summary>
              Defines parameters on the given method builder according to the parameter types and info given.
            </summary>
      <param name="parameterTypes">array of parameter types</param>
      <param name="parameters">additional array of parameter info</param>
      <param name="method">the method builder on which to define the parameters</param>
      <returns />
      <requires exception="T:System.ArgumentNullException" csharp="method != (System.Reflection.MethodInfo)null" vb="method &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">method != (System.Reflection.MethodInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="parameters != null" vb="parameters &lt;&gt; Nothing">parameters != null</requires>
      <exception cref="T:System.ArgumentNullException">parameters == null</exception>
    </member>
    <member name="T:FlitBit.Emit.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.Properties.Resources.Err_BaseTypeConstraintNotSet">
      <summary>
              Looks up a localized string similar to base type constraint not set.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.PropertyInfoExtensions">
      <summary>
              Various PropertyInfo extensions.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.PropertyInfoExtensions.FormatBackingFieldName(System.Reflection.MemberInfo)">
      <summary>
              Produces a backing field name for the given member
            </summary>
      <param name="member">the member</param>
      <returns>returns a backing field name</returns>
      <requires exception="T:System.ArgumentNullException" csharp="member != (System.Reflection.MemberInfo)null" vb="member &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">member != (System.Reflection.MemberInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">member == null</exception>
      <requires exception="T:System.ArgumentException" csharp="member.DeclaringType != (System.Type)null" vb="member.DeclaringType &lt;&gt; ((System.Type)Nothing) ">member.DeclaringType != (System.Type)null</requires>
      <exception cref="T:System.ArgumentException">member.DeclaringType == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:FlitBit.Emit.RuntimeAssemblies">
      <summary>
              Utility class for emitting assemblies and tracking those assemblies so
              that type resolution works for the emitted types.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.RuntimeAssemblies.GetEmittableFullName(System.Type)">
      <summary>
              Generates an emittable full name for a type by name mangling.
            </summary>
      <param name="type" />
      <returns />
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.RuntimeAssemblies.GetEmittedAssembly(System.String)">
      <summary>
              Gets an emitted assembly by name.
            </summary>
      <param name="name">the assembly's name</param>
      <returns>the assembly if it exists; otherwise null</returns>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
    </member>
    <member name="M:FlitBit.Emit.RuntimeAssemblies.GetEmittedAssemblyWithEmitWhenNotFound(System.Reflection.AssemblyName,System.Action{FlitBit.Emit.EmittedAssembly})">
      <summary>
              Gets an emitted assembly by name; if it doesn't exist usess the emitter callback to
              generate it.
            </summary>
      <param name="name">the assembly's name</param>
      <param name="emitter">a callback method that will emit the assembly</param>
      <returns>the assembly</returns>
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires description="emitter cannot be null" exception="T:System.ArgumentNullException" csharp="emitter != null" vb="emitter &lt;&gt; Nothing">emitter != null</requires>
      <exception cref="T:System.ArgumentNullException">emitter == null</exception>
    </member>
    <member name="M:FlitBit.Emit.RuntimeAssemblies.MakeEmittedAssemblyNameFromAssembly(System.String,System.Reflection.Assembly)">
      <summary>
              Creates an emitted assembly based on information taken from the target assembly.
            </summary>
      <param name="nameFormat">used to format the emitted assembly's name</param>
      <param name="target">the target assembly</param>
      <returns>an assembly name</returns>
      <requires description="nameFormat cannot be null" exception="T:System.ArgumentNullException" csharp="nameFormat != null" vb="nameFormat &lt;&gt; Nothing">nameFormat != null</requires>
      <exception cref="T:System.ArgumentNullException">nameFormat == null</exception>
      <requires description="target cannot be null" exception="T:System.ArgumentNullException" csharp="target != (System.Reflection.Assembly)null" vb="target &lt;&gt; ((System.Reflection.Assembly)Nothing) ">target != (System.Reflection.Assembly)null</requires>
      <exception cref="T:System.ArgumentNullException">target == null</exception>
    </member>
    <member name="M:FlitBit.Emit.RuntimeAssemblies.PrepareTypeName(System.Type,System.String)">
      <summary>
              Prepares a type name.
            </summary>
      <param name="type" />
      <param name="suffix" />
      <returns />
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="suffix != null" vb="suffix &lt;&gt; Nothing">suffix != null</requires>
      <exception cref="T:System.ArgumentNullException">suffix == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="suffix.Length &gt; 0" vb="suffix.Length &gt; 0">suffix.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">suffix.Length &lt;= 0</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:FlitBit.Emit.RuntimeAssemblies.DynamicAssembly">
      <summary>
              Gets the dynamic assembly.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.RuntimeAssemblies.WriteDynamicAssemblyOnExit">
      <summary>
              Indicates whether the dynamic assembly should be writen to disk upon exit.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.RuntimeAssembliesConfigSection">
      <summary>
              Configuration section for cache settings.
            </summary>
    </member>
    <member name="F:FlitBit.Emit.RuntimeAssembliesConfigSection.SectionName">
      <summary>
              Configuration section name for cache settings
            </summary>
    </member>
    <member name="P:FlitBit.Emit.RuntimeAssembliesConfigSection.DynamicAssemblyPrefix">
      <summary>
              Prefix for the emitted assembly.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.RuntimeAssembliesConfigSection.WriteAssembliesOnExit">
      <summary>
              Indicates whether emitted assemblies should be written to disk on exit.
            </summary>
    </member>
    <member name="P:FlitBit.Emit.RuntimeAssembliesConfigSection.Current">
      <summary>
              Gets the current configuration section.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.TypeRef">
      <summary>
              A wrapper object for a type reference.
            </summary>
    </member>
    <member name="F:FlitBit.Emit.TypeRef.Empty">
      <summary>
              An empty type ref.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.TypeRef.#ctor(System.Type)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="type">the type that is referenced</param>
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">type == null</exception>
    </member>
    <member name="M:FlitBit.Emit.TypeRef.#ctor">
      <summary>
              Creates a new instance.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.TypeRef.FromEmittedClass(FlitBit.Emit.EmittedClass)">
      <summary>
              Creates a type ref from an emitted type (possibly before compilation).
            </summary>
      <param name="class">the emitted type</param>
      <returns>a type ref</returns>
    </member>
    <member name="M:FlitBit.Emit.TypeRef.FromType``1">
      <summary>
              Creates a type ref from type T
            </summary>
      <typeparam name="T">type T</typeparam>
      <returns>a type ref</returns>
    </member>
    <member name="M:FlitBit.Emit.TypeRef.FromType(System.Type)">
      <summary>
              Creates a type ref from a type.
            </summary>
      <param name="type">the type</param>
      <returns>the type ref</returns>
    </member>
    <member name="P:FlitBit.Emit.TypeRef.Target">
      <summary>
              Gets the reference target.
            </summary>
    </member>
    <member name="T:FlitBit.Emit.EmittedTypeRef">
      <summary>
              A specialized TypeRef for emitted types.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.EmittedTypeRef.#ctor(FlitBit.Emit.EmittedClass)">
      <summary>
              Creates a new instance.
            </summary>
      <param name="eclass">the emitted type</param>
      <requires exception="T:System.ArgumentNullException" csharp="eclass != null" vb="eclass &lt;&gt; Nothing">eclass != null</requires>
      <exception cref="T:System.ArgumentNullException">eclass == null</exception>
    </member>
    <member name="P:FlitBit.Emit.EmittedTypeRef.Target">
      <summary>
              Gets the referenced type.
            </summary>
    </member>
    <member name="M:FlitBit.Emit.ParameterHelper.CreateParametersList(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
      <requires exception="T:System.ArgumentNullException" csharp="parameters != null" vb="parameters &lt;&gt; Nothing">parameters != null</requires>
      <exception cref="T:System.ArgumentNullException">parameters == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.GetConstructor(System.Type[])">
      <requires exception="T:System.ArgumentNullException" csharp="new FlitBit.Emit.EmittedClass.&lt;&gt;c__DisplayClass15(){
    args = args, 
}.args != null" vb="(() =&gt; {
    FlitBit.Emit.EmittedClass.&lt;&gt;c__DisplayClass15 local_2_prime = New FlitBit.Emit.EmittedClass.&lt;&gt;c__DisplayClass15();
    (local_2_prime.args = args)
    return local_2_prime; })().args &lt;&gt; Nothing">new FlitBit.Emit.EmittedClass.&lt;&gt;c__DisplayClass15(){
    args = args, 
}.args != null</requires>
      <exception cref="T:System.ArgumentNullException">args == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.AddField(FlitBit.Emit.EmittedField)">
      <requires exception="T:System.ArgumentNullException" csharp="field != null" vb="field &lt;&gt; Nothing">field != null</requires>
      <exception cref="T:System.ArgumentNullException">field == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="field.Name != null" vb="field.Name &lt;&gt; Nothing">field.Name != null</requires>
      <exception cref="T:System.ArgumentNullException">field.Name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="field.Name.Length &gt; 0" vb="field.Name.Length &gt; 0">field.Name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">field.Name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.AddMember(FlitBit.Emit.EmittedMember)">
      <requires exception="T:System.ArgumentNullException" csharp="m != null" vb="m &lt;&gt; Nothing">m != null</requires>
      <exception cref="T:System.ArgumentNullException">m == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.AddMethod(FlitBit.Emit.EmittedMethodBase)">
      <requires exception="T:System.ArgumentNullException" csharp="method != null" vb="method &lt;&gt; Nothing">method != null</requires>
      <exception cref="T:System.ArgumentNullException">method == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.AddProperty(FlitBit.Emit.EmittedProperty)">
      <requires exception="T:System.ArgumentNullException" csharp="prop != null" vb="prop &lt;&gt; Nothing">prop != null</requires>
      <exception cref="T:System.ArgumentNullException">prop == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedClass.CheckMemberName(System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedAssembly.Save">
      <requires description="must be compiled before save" exception="T:System.ArgumentNullException" csharp="this.IsCompiled" vb="Me.IsCompiled">this.IsCompiled</requires>
      <exception cref="T:System.ArgumentNullException">!(IsCompiled)</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedAssembly.Save(FlitBit.Emit.EmittedModule)">
      <requires description="must be compiled before save" exception="T:System.ArgumentNullException" csharp="this.IsCompiled" vb="Me.IsCompiled">this.IsCompiled</requires>
      <exception cref="T:System.ArgumentNullException">!(IsCompiled)</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedAssembly.CheckModuleName(System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedModule.CheckClassName(System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="name != null" vb="name &lt;&gt; Nothing">name != null</requires>
      <exception cref="T:System.ArgumentNullException">name == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="name.Length &gt; 0" vb="name.Length &gt; 0">name.Length &gt; 0</requires>
      <exception cref="T:System.ArgumentNullException">name.Length &lt;= 0</exception>
    </member>
    <member name="M:FlitBit.Emit.RawFieldRef.#ctor(System.Reflection.FieldInfo)">
      <requires exception="T:System.ArgumentNullException" csharp="field != (System.Reflection.FieldInfo)null" vb="field &lt;&gt; ((System.Reflection.FieldInfo)Nothing) ">field != (System.Reflection.FieldInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">field == null</exception>
    </member>
    <member name="M:FlitBit.Emit.RawPropertyRef.#ctor(System.Reflection.PropertyInfo)">
      <requires description="prop cannot be null" exception="T:System.ArgumentNullException" csharp="prop != (System.Reflection.PropertyInfo)null" vb="prop &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">prop != (System.Reflection.PropertyInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">prop == null</exception>
    </member>
    <member name="M:FlitBit.Emit.EmittedGenericArgument.FinishDefinition(System.Reflection.Emit.GenericTypeParameterBuilder)">
      <requires exception="T:System.ArgumentNullException" csharp="arg != (System.Type)null" vb="arg &lt;&gt; ((System.Type)Nothing) ">arg != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">arg == null</exception>
    </member>
  </members>
</doc>